@page
@model FinalProject.Pages.User.DashboardModel
@{
    ViewData["Title"] = "Bảng điều khiển";
    Layout = "_Layout";
}

<!-- Cosmic Dashboard Section -->
<section class="cosmic-dashboard-section">
    <div class="cosmic-background"></div>
    <div class="dashboard-particles"></div>
    <div class="floating-stars"></div>
    
    <div class="cosmic-container-fluid">
    @Html.AntiForgeryToken()
    
    <!-- Connection Status Indicator -->
        <div id="connectionStatus" class="cosmic-connection-status connecting" style="display: none;">
        <i class="fas fa-wifi"></i> <span id="connectionText">Đang kết nối...</span>
    </div>
    
        <div class="cosmic-row">
        <!-- Left Sidebar -->
            <div class="cosmic-sidebar">
                <div class="cosmic-sidebar-content">
                <!-- Sidebar Header -->
                    <div class="cosmic-sidebar-header">
                        <h5 class="cosmic-sidebar-title">
                            <i class="fas fa-comments cosmic-icon"></i> 
                            <span class="text-gradient">Phiên trò chuyện</span>
                    </h5>
                </div>

                <!-- Create New Session Button -->
                    <div class="cosmic-sidebar-section">
                        <button class="cosmic-btn cosmic-btn-primary w-100" id="createSessionBtn">
                            <i class="fas fa-plus me-2"></i>Tạo phiên mới
                            <span class="btn-glow"></span>
                    </button>
                </div>

                <!-- Sessions List -->
                    <div class="cosmic-sessions-container">
                    @if (Model.RecentSessions.Any())
                    {
                            <h6 class="cosmic-section-label">Phiên gần đây</h6>
                            <div class="cosmic-sessions-list">
                            @foreach (var session in Model.RecentSessions)
                            {
                                    <div class="cosmic-session-item session-item" 
                                         data-session-id="@session.Id">
                                        <div class="session-header">
                                            <h6 class="session-title">@session.Title</h6>
                                            <div class="session-actions">
                                                <small class="session-date">@session.CreatedAt.ToString("dd/MM")</small>
                                                <button class="cosmic-delete-btn" 
                                     data-session-id="@session.Id" 
                                                        data-session-title="@session.Title"
                                                        title="Xóa phiên">
                                                    <i class="fas fa-trash-alt"></i>
                                                </button>
                                    </div>
                                        </div>
                                        <p class="session-description">@session.Description</p>
                                        <small class="session-time">@session.CreatedAt.ToString("HH:mm")</small>
                                        <div class="cosmic-session-glow"></div>
                                </div>
                            }
                        </div>

                        @if (Model.RecentSessions.Count > 5)
                        {
                            <div class="text-center mt-3">
                                    <button class="cosmic-btn cosmic-btn-outline">
                                        <i class="fas fa-ellipsis-h me-2"></i>Xem tất cả
                                </button>
                            </div>
                        }
                    }
                    else
                    {
                            <div class="cosmic-empty-state">
                                <i class="fas fa-comments cosmic-empty-icon"></i>
                                <p class="cosmic-empty-text">Chưa có phiên trò chuyện nào</p>
                                <button class="cosmic-btn cosmic-btn-outline" id="createFirstSessionBtn">
                                    <i class="fas fa-plus me-2"></i>Tạo phiên đầu tiên
                            </button>
                        </div>
                    }
                </div>

                <!-- User Info at Bottom -->
                    <div class="cosmic-user-info">
                        <div class="cosmic-user-avatar">
                            <i class="fas fa-user-circle"></i>
                        </div>
                        <div class="cosmic-user-details">
                            <div class="cosmic-user-name">@Model.FullName</div>
                            <div class="cosmic-user-role">@Model.UserRole</div>
                        </div>
                        <div class="cosmic-dropdown">
                            <button class="cosmic-btn cosmic-btn-settings dropdown-toggle" type="button" 
                                    data-bs-toggle="dropdown">
                                <i class="fas fa-cog"></i>
                            </button>
                            <ul class="cosmic-dropdown-menu dropdown-menu">
                                <li><a class="cosmic-dropdown-item dropdown-item" href="#"><i class="fas fa-user me-2"></i>Hồ sơ</a></li>
                                <li><a class="cosmic-dropdown-item dropdown-item" href="#"><i class="fas fa-cog me-2"></i>Cài đặt</a></li>
                                <li><hr class="cosmic-dropdown-divider dropdown-divider"></li>
                                <li>
                                    <form method="post" asp-page="/Login" asp-page-handler="Logout" class="d-inline">
                                        <button type="submit" class="cosmic-dropdown-item dropdown-item">
                                            <i class="fas fa-sign-out-alt me-2"></i>Đăng xuất
                    </button>
                </form>
                                </li>
                            </ul>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
            <div class="cosmic-main-content">
                <div class="cosmic-content-wrapper">
                <!-- Header -->
                    <div class="cosmic-dashboard-header">
                        <div class="cosmic-header-content">
                            <h2 class="cosmic-dashboard-title">
                                <i class="fas fa-tachometer-alt cosmic-icon"></i>
                                <span class="text-gradient">Dashboard</span>
                            </h2>
                            <p class="cosmic-welcome-text">Chào mừng trở lại, <strong class="text-gradient">@Model.FullName</strong></p>
                    </div>
                        <div class="cosmic-date-info">
                            <small class="cosmic-date-text">Hôm nay: @DateTime.Now.ToString("dd/MM/yyyy")</small>
        </div>
    </div>

                <!-- Quick Stats -->
                    <div class="cosmic-stats-row">
                        <div class="cosmic-stat-card cosmic-stat-primary">
                            <div class="cosmic-stat-content">
                                <div class="cosmic-stat-info">
                                    <div class="cosmic-stat-label">Phiên trò chuyện</div>
                                    <div class="cosmic-stat-value">@Model.UserSessions</div>
                        </div>
                                <div class="cosmic-stat-icon">
                                    <i class="fas fa-comments"></i>
                        </div>
                    </div>
                            <div class="cosmic-stat-glow"></div>
        </div>

                        <div class="cosmic-stat-card cosmic-stat-success">
                            <div class="cosmic-stat-content">
                                <div class="cosmic-stat-info">
                                    <div class="cosmic-stat-label">Tin nhắn đã gửi</div>
                                    <div class="cosmic-stat-value">@Model.MessagesSent</div>
                        </div>
                                <div class="cosmic-stat-icon">
                                    <i class="fas fa-paper-plane"></i>
                        </div>
                    </div>
                            <div class="cosmic-stat-glow"></div>
        </div>

                        <div class="cosmic-stat-card cosmic-stat-info">
                            <div class="cosmic-stat-content">
                                <div class="cosmic-stat-info">
                                    <div class="cosmic-stat-label">Ngày tham gia</div>
                                    <div class="cosmic-stat-value-small">@Model.JoinDate</div>
                        </div>
                                <div class="cosmic-stat-icon">
                                    <i class="fas fa-calendar"></i>
                        </div>
                    </div>
                            <div class="cosmic-stat-glow"></div>
                    </div>
                </div>

                <!-- Main Chat Area -->
                    <div class="cosmic-chat-section">
                        <div class="cosmic-chat-card">
                            <div class="cosmic-chat-header">
                                <h5 class="cosmic-chat-title" id="chatTitle">
                                    <i class="fas fa-comment-dots me-2"></i>Chọn phiên để bắt đầu trò chuyện
                                </h5>
                            </div>
                            <div class="cosmic-chat-body">
                                <!-- Chat Messages Area -->
                                <div class="cosmic-chat-messages" id="chatMessages">
                                    <div class="cosmic-welcome-message">
                                        <i class="fas fa-robot cosmic-welcome-icon"></i>
                                        <h5 class="cosmic-welcome-title">Chào mừng đến với <span class="text-gradient">AI Chat</span></h5>
                                        <p class="cosmic-welcome-subtitle">Chọn một phiên trò chuyện từ sidebar hoặc tạo phiên mới để bắt đầu.</p>
            </div>
        </div>

                                <!-- Chat Input Area -->
                                <div class="cosmic-chat-input" id="chatInputArea" style="display: none;">
                                    <div class="cosmic-input-wrapper">
                                        <input type="text" class="cosmic-message-input" placeholder="Nhập tin nhắn của bạn..." id="messageInput">
                                        <button class="cosmic-send-btn" type="button" id="sendMessageBtn">
                                        <i class="fas fa-paper-plane"></i>
                                            <span class="btn-glow"></span>
                                    </button>
                                </div>
                </div>
            </div>
        </div>
    </div>

                <!-- Quick Actions -->
                    <div class="cosmic-actions-section">
                        <div class="cosmic-actions-card">
                            <div class="cosmic-actions-header">
                                <h5 class="cosmic-actions-title">
                                    <i class="fas fa-rocket me-2"></i>
                                    <span class="text-gradient">Hành động nhanh</span>
                    </h5>
                </div>
                            <div class="cosmic-actions-grid">
                                <button class="cosmic-action-btn cosmic-action-primary">
                                    <i class="fas fa-plus-circle"></i>
                                    <span>Tạo phiên mới</span>
                                    <div class="cosmic-action-glow"></div>
                                        </button>
                                <button class="cosmic-action-btn cosmic-action-success">
                                    <i class="fas fa-history"></i>
                                    <span>Xem lịch sử</span>
                                    <div class="cosmic-action-glow"></div>
                                        </button>
                                <button class="cosmic-action-btn cosmic-action-info">
                                    <i class="fas fa-user-edit"></i>
                                    <span>Cập nhật hồ sơ</span>
                                    <div class="cosmic-action-glow"></div>
                                        </button>
                                <button class="cosmic-action-btn cosmic-action-warning">
                                    <i class="fas fa-cog"></i>
                                    <span>Cài đặt</span>
                                    <div class="cosmic-action-glow"></div>
                                        </button>
                        </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
</section>

@section Scripts {
    <!-- SignalR Client Library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
    <!-- Marked.js for Markdown rendering -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <!-- Highlight.js for code syntax highlighting -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
    <script>
        // SignalR connection and global variables
        let connection = null;
        let currentSessionId = null;
        let currentUserId = @Model.UserId;
        let currentStreamingMessage = null;
        
        // Configure markdown renderer
        function initializeMarkdownRenderer() {
            if (typeof marked !== 'undefined') {
                // Configure marked.js options
                marked.setOptions({
                    breaks: true,        // Convert line breaks to <br>
                    gfm: true,          // Enable GitHub Flavored Markdown
                    sanitize: false,    // We'll sanitize manually for security
                    smartLists: true,   // Use smarter list behavior
                    smartypants: false, // Don't use "smart" typographic punctuation
                    highlight: function(code, language) {
                        // Use highlight.js for syntax highlighting if available
                        if (typeof hljs !== 'undefined' && language) {
                            try {
                                return hljs.highlight(code, { language: language }).value;
                            } catch (err) {
                                return hljs.highlightAuto(code).value;
                            }
                        }
                        return code;
                    }
                });
            }
        }
        
        // Render markdown content with security sanitization
        function renderMarkdown(content) {
            if (typeof marked === 'undefined') {
                // Fallback if marked.js is not loaded
                return escapeHtml(content);
            }
            
            try {
                // Parse markdown
                let html = marked.parse(content);
                
                // Basic sanitization - remove potentially dangerous tags while keeping formatting
                html = sanitizeHtml(html);
                
                return html;
            } catch (error) {
                console.warn('Markdown parsing error:', error);
                // Fallback to escaped HTML
                return escapeHtml(content);
            }
        }
        
        // Basic HTML sanitization for AI responses
        function sanitizeHtml(html) {
            // Create a temporary div to parse HTML
            const tempDiv = document.createElement('div');
            tempDiv.innerHTML = html;
            
            // List of allowed tags for AI responses
            const allowedTags = ['p', 'br', 'strong', 'b', 'em', 'i', 'u', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 
                               'ul', 'ol', 'li', 'blockquote', 'code', 'pre', 'a', 'span', 'div', 'table', 'tr', 'td', 'th', 'thead', 'tbody'];
            
            // List of allowed attributes
            const allowedAttrs = ['href', 'class', 'data-language'];
            
            // Remove dangerous elements and attributes
            const allElements = tempDiv.querySelectorAll('*');
            allElements.forEach(element => {
                // Check if tag is allowed
                if (!allowedTags.includes(element.tagName.toLowerCase())) {
                    element.remove();
                    return;
                }
                
                // Remove dangerous attributes
                Array.from(element.attributes).forEach(attr => {
                    if (!allowedAttrs.includes(attr.name.toLowerCase())) {
                        element.removeAttribute(attr.name);
                    }
                });
                
                // Special handling for links - ensure they're safe
                if (element.tagName.toLowerCase() === 'a') {
                    const href = element.getAttribute('href');
                    if (href && !href.startsWith('http://') && !href.startsWith('https://') && !href.startsWith('mailto:')) {
                        element.removeAttribute('href');
                    } else if (href) {
                        element.setAttribute('target', '_blank');
                        element.setAttribute('rel', 'noopener noreferrer');
                    }
                }
            });
            
            return tempDiv.innerHTML;
        }

        // Session management
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize markdown renderer
            initializeMarkdownRenderer();
            
            // Initialize cosmic effects
            initializeCosmicEffects();
            
            // Initialize SignalR connection
            initializeSignalRConnection();
            
            // Session item click handlers
            document.querySelectorAll('.session-item').forEach(item => {
                item.addEventListener('click', function() {
                    selectSession(this);
                });
            });
            
            // Create session button handlers
            document.getElementById('createSessionBtn')?.addEventListener('click', createNewSession);
            document.getElementById('createFirstSessionBtn')?.addEventListener('click', createNewSession);
            
            // Also handle the quick action buttons
            document.querySelectorAll('button').forEach(btn => {
                if (btn.innerHTML.includes('Tạo phiên mới')) {
                    btn.addEventListener('click', createNewSession);
                }
            });
            
            // Delete session button handlers
            document.querySelectorAll('.cosmic-delete-btn').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.stopPropagation(); // Prevent session selection
                    const sessionId = this.dataset.sessionId;
                    const sessionTitle = this.dataset.sessionTitle;
                    deleteSession(sessionId, sessionTitle);
                });
            });
            
            // Send message handler
            document.getElementById('sendMessageBtn')?.addEventListener('click', sendMessage);
            document.getElementById('messageInput')?.addEventListener('keypress', function(e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
            
            // Typing indicators
            let typingTimer;
            document.getElementById('messageInput')?.addEventListener('input', function() {
                if (currentSessionId && connection) {
                    connection.invoke("StartTyping", currentSessionId, currentUserId.toString());
                    
                    clearTimeout(typingTimer);
                    typingTimer = setTimeout(() => {
                        connection.invoke("StopTyping", currentSessionId, currentUserId.toString());
                    }, 1000);
                }
            });
        });

        // Initialize cosmic effects
        function initializeCosmicEffects() {
            createDashboardParticles();
            createFloatingStars();
        }

        // Create floating particles
        function createDashboardParticles() {
            const particlesContainer = document.querySelector('.dashboard-particles');
            if (!particlesContainer) return;

            for (let i = 0; i < 40; i++) {
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = Math.random() * 100 + '%';
                particle.style.top = Math.random() * 100 + '%';
                particle.style.animationDelay = Math.random() * 4 + 's';
                particle.style.animationDuration = (Math.random() * 3 + 2) + 's';
                particlesContainer.appendChild(particle);
            }
        }

        // Create floating stars
        function createFloatingStars() {
            const starsContainer = document.querySelector('.floating-stars');
            if (!starsContainer) return;

            for (let i = 0; i < 25; i++) {
                const star = document.createElement('div');
                star.className = 'star';
                star.style.left = Math.random() * 100 + '%';
                star.style.top = Math.random() * 100 + '%';
                star.style.animationDelay = Math.random() * 3 + 's';
                starsContainer.appendChild(star);
            }
        }
        
        // Initialize SignalR connection
        async function initializeSignalRConnection() {
            try {
                updateConnectionStatus('connecting', 'Đang kết nối...');
                
                connection = new signalR.HubConnectionBuilder()
                    .withUrl("/chathub")
                    .withAutomaticReconnect()
                    .build();

                // Set up event handlers
                setupSignalREventHandlers();
                setupConnectionEventHandlers();

                // Start the connection
                await connection.start();
                console.log("✅ SignalR Connected");
                updateConnectionStatus('connected', 'Đã kết nối');
                
                // Hide connection status after 3 seconds
                setTimeout(() => {
                    const statusElement = document.getElementById('connectionStatus');
                    if (statusElement) {
                        statusElement.style.display = 'none';
                    }
                }, 3000);
                
            } catch (err) {
                console.error("❌ SignalR Connection Error:", err);
                updateConnectionStatus('disconnected', 'Kết nối thất bại');
                showNotification("Lỗi kết nối real-time. Trang sẽ tự động tải lại.", "error");
                setTimeout(() => location.reload(), 5000);
            }
        }

        // Setup connection event handlers
        function setupConnectionEventHandlers() {
            connection.onreconnecting(() => {
                updateConnectionStatus('connecting', 'Đang kết nối lại...');
            });

            connection.onreconnected(() => {
                updateConnectionStatus('connected', 'Đã kết nối lại');
                setTimeout(() => {
                    const statusElement = document.getElementById('connectionStatus');
                    if (statusElement) {
                        statusElement.style.display = 'none';
                    }
                }, 2000);
            });

            connection.onclose(() => {
                updateConnectionStatus('disconnected', 'Mất kết nối');
            });
        }

        // Update connection status indicator
        function updateConnectionStatus(status, message) {
            const statusElement = document.getElementById('connectionStatus');
            const textElement = document.getElementById('connectionText');
            
            if (statusElement && textElement) {
                statusElement.style.display = 'block';
                statusElement.className = `cosmic-connection-status ${status}`;
                textElement.textContent = message;
                
                // Update icon based on status
                const icon = statusElement.querySelector('i');
                if (icon) {
                    icon.className = status === 'connected' ? 'fas fa-wifi' : 
                                   status === 'connecting' ? 'fas fa-spinner fa-spin' : 
                                   'fas fa-wifi-slash';
                }
            }
        }

        // Setup SignalR event handlers
        function setupSignalREventHandlers() {
            // Message received
            connection.on("MessageReceived", function (message) {
                displayMessage(message);
            });

            // AI typing indicators
            connection.on("AITypingStart", function () {
                showAITyping();
            });

            connection.on("AITypingStop", function () {
                hideAITyping();
            });

            // AI response streaming
            connection.on("AIResponseStart", function (messageId) {
                currentStreamingMessage = {
                    id: messageId,
                    content: "",
                    element: null
                };
                startStreamingMessage();
            });

            connection.on("AIResponseChunk", function (data) {
                if (currentStreamingMessage && data.messageId === currentStreamingMessage.id) {
                    appendToStreamingMessage(data.chunk);
                }
            });

            connection.on("AIResponseComplete", function (message) {
                completeStreamingMessage(message);
                hideAITyping();
            });

            connection.on("AIResponseError", function (error) {
                showStreamingError(error);
                hideAITyping();
            });

            // User typing indicators
            connection.on("UserTypingStart", function (userId) {
                showUserTyping(userId);
            });

            connection.on("UserTypingStop", function (userId) {
                hideUserTyping(userId);
            });

            // Errors
            connection.on("Error", function (error) {
                showNotification(error, "error");
            });
        }

        // Centralized session selection function
        async function selectSession(sessionElement) {
            const sessionId = parseInt(sessionElement.dataset.sessionId);
            const sessionTitle = sessionElement.querySelector('h6').textContent;
            
            console.log(`🎯 Selecting session: ${sessionId} - ${sessionTitle}`);
            
            // Update active session visually
            document.querySelectorAll('.session-item').forEach(s => s.classList.remove('active'));
            sessionElement.classList.add('active');
            
            // Update chat title
            document.getElementById('chatTitle').innerHTML = `<i class="fas fa-comment-dots me-2"></i>${sessionTitle}`;
            
            // Show chat input
            document.getElementById('chatInputArea').style.display = 'flex';
            
            // Switch to new session (this updates currentSessionId)
            await switchToSession(sessionId);
            
            // Load session messages
            loadSessionMessages(sessionId);
            
            // Focus on message input for convenience
            setTimeout(() => {
                const messageInput = document.getElementById('messageInput');
                if (messageInput) {
                    messageInput.focus();
                }
            }, 200);
        }

        // Switch to a different session
        async function switchToSession(sessionId) {
            console.log(`🔄 Switching from session ${currentSessionId} to session ${sessionId}`);
            
            if (currentSessionId && connection) {
                await connection.invoke("LeaveSession", currentSessionId, currentUserId.toString());
            }
            
            // Update the current session ID
            currentSessionId = sessionId;
            console.log(`✅ Current session ID updated to: ${currentSessionId}`);
            
            if (connection) {
                await connection.invoke("JoinSession", sessionId, currentUserId.toString());
            }
        }

        function createNewSession() {
            // Auto-generate session attributes
            const now = new Date();
            const timeStr = now.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });
            const dateStr = now.toLocaleDateString('vi-VN', { day: '2-digit', month: '2-digit' });
            const title = `Cuộc trò chuyện ${dateStr} ${timeStr}`;
            const description = 'Phiên trò chuyện mới với AI Assistant';
            
            // Show loading state
            const createBtn = document.getElementById('createSessionBtn');
            const originalText = createBtn.innerHTML;
            createBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Đang tạo...';
            createBtn.disabled = true;
            
            // Show immediate UI feedback
            showNotification('Đang tạo phiên trò chuyện mới...', 'info');
            
            // Make AJAX call to create session
            fetch('/User/Dashboard?handler=CreateSession', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: `title=${encodeURIComponent(title)}&description=${encodeURIComponent(description)}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Add new session to sidebar
                    addSessionToSidebar(data.session);
                    
                    // Show success message
                    showNotification('Phiên trò chuyện đã được tạo thành công!', 'success');
                    
                    // Immediately switch to new session and open chat UI
                    setTimeout(() => {
                        const newSessionElement = document.querySelector(`[data-session-id="${data.session.id}"]`);
                        if (newSessionElement) {
                            console.log(`🆕 Auto-selecting newly created session: ${data.session.id}`);
                            // Use the centralized session selection function
                            selectSession(newSessionElement);
                        } else {
                            console.error(`❌ Could not find newly created session element with ID: ${data.session.id}`);
                        }
                    }, 100);
                } else {
                    showNotification(data.message, 'error');
                }
            })
            .catch(error => {
                console.error('Error creating session:', error);
                showNotification('Đã xảy ra lỗi khi tạo phiên trò chuyện.', 'error');
            })
            .finally(() => {
                // Restore button state
                createBtn.innerHTML = originalText;
                createBtn.disabled = false;
            });
        }
        
        function deleteSession(sessionId, sessionTitle) {
            // Show cosmic confirmation dialog
            showCosmicConfirmation(
                'Xóa phiên trò chuyện',
                `Bạn có chắc chắn muốn xóa phiên "<strong>${sessionTitle}</strong>"?<br><small class="text-muted">Hành động này không thể hoàn tác.</small>`,
                () => {
                    // User confirmed deletion
                    const sessionElement = document.querySelector(`[data-session-id="${sessionId}"]`);
                    const deleteBtn = sessionElement?.querySelector('.cosmic-delete-btn');
                    
                    // Show loading state on delete button
                    if (deleteBtn) {
                        deleteBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
                        deleteBtn.disabled = true;
                    }
                    
                    // Make AJAX call to delete session
                    fetch('/User/Dashboard?handler=DeleteSession', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        },
                        body: `sessionId=${encodeURIComponent(sessionId)}`
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Remove session from sidebar with animation
                            if (sessionElement) {
                                sessionElement.style.opacity = '0';
                                sessionElement.style.transform = 'translateX(-100%)';
                                setTimeout(() => {
                                    sessionElement.remove();
                                    
                                    // If this was the active session, clear chat area
                                    if (sessionId == currentSessionId) {
                                        clearChatArea();
                                        currentSessionId = null;
                                    }
                                    
                                    // Check if no sessions left
                                    const remainingSessions = document.querySelectorAll('.cosmic-session-item');
                                    if (remainingSessions.length === 0) {
                                        showEmptySessionsState();
                                    }
                                }, 300);
                            }
                            
                            // Show success message
                            showNotification(data.message, 'success');
                        } else {
                            showNotification(data.message, 'error');
                            
                            // Restore delete button
                            if (deleteBtn) {
                                deleteBtn.innerHTML = '<i class="fas fa-trash-alt"></i>';
                                deleteBtn.disabled = false;
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error deleting session:', error);
                        showNotification('Đã xảy ra lỗi khi xóa phiên trò chuyện.', 'error');
                        
                        // Restore delete button
                        if (deleteBtn) {
                            deleteBtn.innerHTML = '<i class="fas fa-trash-alt"></i>';
                            deleteBtn.disabled = false;
                        }
                    });
                }
            );
        }
        
        function loadSessionMessages(sessionId) {
            console.log(`📥 Loading messages for session: ${sessionId}`);
            
            const chatMessages = document.getElementById('chatMessages');
            chatMessages.innerHTML = `
                <div class="cosmic-loading-state">
                    <div class="cosmic-spinner"></div>
                    <p class="cosmic-loading-text">Đang tải tin nhắn cho phiên ${sessionId}...</p>
                </div>
            `;
            
            // Load actual messages from database
            fetch(`/User/Dashboard?handler=SessionMessages&sessionId=${sessionId}`)
                .then(response => response.json())
                .then(data => {
                    console.log(`📨 Received ${data.messages?.length || 0} messages for session ${sessionId}`);
                    
                    if (data.success) {
                        displayMessages(data.messages);
                        
                        // If no messages, show welcome message
                        if (data.messages.length === 0) {
                            console.log(`💬 No messages found for session ${sessionId}, showing welcome message`);
                            chatMessages.innerHTML = `
                                <div class="cosmic-message cosmic-message-ai">
                                    <div class="cosmic-message-content">
                                        <small class="cosmic-message-meta">AI Assistant - ${new Date().toLocaleTimeString('vi-VN', {hour: '2-digit', minute: '2-digit'})}</small>
                                        <div class="cosmic-message-text markdown-content">Xin chào! 👋 Tôi là AI Assistant của bạn. Hãy bắt đầu cuộc trò chuyện bằng cách đặt câu hỏi hoặc chia sẻ điều gì đó với tôi!</div>
                                    </div>
                                </div>
                            `;
                        }
                    } else {
                        console.error(`❌ Failed to load messages for session ${sessionId}:`, data.message);
                        chatMessages.innerHTML = `
                            <div class="cosmic-error-state">
                                <i class="fas fa-exclamation-triangle"></i>
                                <p>Không thể tải tin nhắn: ${data.message}</p>
                        </div>
                        `;
                    }
                })
                .catch(error => {
                    console.error(`❌ Error loading messages for session ${sessionId}:`, error);
                    chatMessages.innerHTML = `
                        <div class="cosmic-error-state">
                            <i class="fas fa-exclamation-triangle"></i>
                            <p>Đã xảy ra lỗi khi tải tin nhắn.</p>
                        </div>
                    `;
                });
        }
        
        // Send message using SignalR
        async function sendMessage() {
            const input = document.getElementById('messageInput');
            const message = input.value.trim();
            
            console.log(`💬 Attempting to send message. Current session ID: ${currentSessionId}, Message: "${message}"`);
            
            if (!message) {
                console.warn('❌ Message is empty, not sending');
                showNotification('Vui lòng nhập tin nhắn.', 'warning');
                return;
            }
            
            if (!currentSessionId) {
                console.error('❌ No session selected, cannot send message');
                showNotification('Vui lòng chọn phiên trò chuyện trước khi gửi tin nhắn.', 'error');
                return;
            }
            
            if (!connection) {
                console.error('❌ SignalR connection not available');
                showNotification('Mất kết nối. Đang thử kết nối lại...', 'error');
                return;
            }
            
            const sendBtn = document.getElementById('sendMessageBtn');
            
            // Disable input and button while sending
            input.disabled = true;
            sendBtn.disabled = true;
            sendBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            
            // Clear input
            input.value = '';
            
            try {
                console.log(`📤 Sending message to session ${currentSessionId} for user ${currentUserId}`);
                // Send message through SignalR
                await connection.invoke("SendMessage", parseInt(currentSessionId), message, currentUserId);
                console.log(`✅ Message sent successfully to session ${currentSessionId}`);
            } catch (error) {
                console.error('❌ Error sending message:', error);
                showNotification('Đã xảy ra lỗi khi gửi tin nhắn.', 'error');
                // Restore the message if there was an error
                input.value = message;
            } finally {
                // Re-enable input and button
                input.disabled = false;
                sendBtn.disabled = false;
                sendBtn.innerHTML = '<i class="fas fa-paper-plane"></i>';
                input.focus();
            }
        }

        // Display a message in the chat
        function displayMessage(message) {
            const chatMessages = document.getElementById('chatMessages');
            const messageElement = createMessageElement(message);
            chatMessages.appendChild(messageElement);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Show AI typing indicator
        function showAITyping() {
            const chatMessages = document.getElementById('chatMessages');
            
            // Remove existing typing indicator
            const existingTyping = chatMessages.querySelector('.cosmic-typing-indicator');
            if (existingTyping) {
                existingTyping.remove();
            }
            
            const typingElement = document.createElement('div');
            typingElement.className = 'cosmic-message cosmic-message-ai cosmic-typing-indicator';
            typingElement.innerHTML = `
                <div class="cosmic-message-content">
                    <small class="cosmic-message-meta">AI Assistant</small>
                    <div class="cosmic-typing-dots">
                            <span></span><span></span><span></span>
                    </div>
                </div>
            `;
            chatMessages.appendChild(typingElement);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Hide AI typing indicator
        function hideAITyping() {
            const typingIndicator = document.querySelector('.cosmic-typing-indicator');
            if (typingIndicator) {
                typingIndicator.remove();
            }
        }

        // Start streaming message
        function startStreamingMessage() {
            const chatMessages = document.getElementById('chatMessages');
            
            // Hide AI typing indicator when streaming starts
            hideAITyping();
            
            const messageElement = document.createElement('div');
            messageElement.className = 'cosmic-message cosmic-message-ai cosmic-streaming-message';
            messageElement.innerHTML = `
                <div class="cosmic-message-content">
                    <small class="cosmic-message-meta">AI Assistant - <span class="cosmic-streaming-indicator">đang trả lời...</span></small>
                    <div class="cosmic-streaming-content markdown-content"></div>
                </div>
            `;
            
            chatMessages.appendChild(messageElement);
            currentStreamingMessage.element = messageElement;
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Append chunk to streaming message
        function appendToStreamingMessage(chunk) {
            if (currentStreamingMessage && currentStreamingMessage.element) {
                currentStreamingMessage.content += chunk;
                const contentElement = currentStreamingMessage.element.querySelector('.cosmic-streaming-content');
                
                // Render the accumulated content as markdown during streaming
                contentElement.innerHTML = renderMarkdown(currentStreamingMessage.content);
                
                // Highlight any new code blocks
                const codeBlocks = contentElement.querySelectorAll('pre code:not(.hljs)');
                codeBlocks.forEach(block => {
                    if (typeof hljs !== 'undefined') {
                        hljs.highlightElement(block);
                    }
                });
                
                // Auto-scroll
                const chatMessages = document.getElementById('chatMessages');
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
        }

        // Complete streaming message
        function completeStreamingMessage(finalMessage) {
            console.log("📦 Complete streaming message received:", finalMessage);
            
            if (currentStreamingMessage && currentStreamingMessage.element) {
                // Remove streaming indicator and replace with final message
                currentStreamingMessage.element.remove();
                
                // Add final message - the actual message is nested under finalMessage.message
                const messageData = finalMessage.message || finalMessage;
                console.log("📨 Message data to display:", messageData);
                
                displayMessage(messageData);
                
                // Show completion notification with stats
                if (finalMessage.tokensUsed > 0) {
                    console.log(`✅ AI Response completed - Tokens: ${finalMessage.tokensUsed}, Time: ${finalMessage.processingTime}ms`);
                }
            }
            
            currentStreamingMessage = null;
        }

        // Show streaming error
        function showStreamingError(error) {
            if (currentStreamingMessage && currentStreamingMessage.element) {
                currentStreamingMessage.element.remove();
            }
            
            const chatMessages = document.getElementById('chatMessages');
            const errorElement = document.createElement('div');
            errorElement.className = 'cosmic-error-message';
            errorElement.innerHTML = `
                <div class="cosmic-error-content">
                        <i class="fas fa-exclamation-triangle"></i>
                    <span>${error}</span>
                </div>
            `;
            chatMessages.appendChild(errorElement);
            chatMessages.scrollTop = chatMessages.scrollHeight;
            
            currentStreamingMessage = null;
        }

        // Show user typing (for multi-user sessions in the future)
        function showUserTyping(userId) {
            // Implementation for showing when other users are typing
            console.log(`User ${userId} is typing...`);
        }

        // Hide user typing
        function hideUserTyping(userId) {
            // Implementation for hiding user typing indicator
            console.log(`User ${userId} stopped typing`);
        }
        
        function addSessionToSidebar(session) {
            const sessionsList = document.querySelector('.cosmic-sessions-list');
            if (!sessionsList) {
                // If no sessions list exists, reload the page to show the new structure
                location.reload();
                return;
            }
            
            // Create new session element
            const sessionElement = document.createElement('div');
            sessionElement.className = 'cosmic-session-item session-item';
            sessionElement.setAttribute('data-session-id', session.id);
            
            sessionElement.innerHTML = `
                <div class="session-header">
                    <h6 class="session-title">${session.title}</h6>
                    <div class="session-actions">
                        <small class="session-date">${new Date(session.createdAt).toLocaleDateString('vi-VN')}</small>
                        <button class="cosmic-delete-btn" 
                                data-session-id="${session.id}" 
                                data-session-title="${session.title}"
                                title="Xóa phiên">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                </div>
                </div>
                <p class="session-description">${session.description || 'Không có mô tả'}</p>
                <small class="session-time">${new Date(session.createdAt).toLocaleTimeString('vi-VN', {hour: '2-digit', minute: '2-digit'})}</small>
                <div class="cosmic-session-glow"></div>
            `;
            
            // Add click handler using the centralized function
            sessionElement.addEventListener('click', function() {
                selectSession(this);
            });
            
            // Add delete button handler
            const deleteBtn = sessionElement.querySelector('.cosmic-delete-btn');
            deleteBtn.addEventListener('click', function(e) {
                e.stopPropagation(); // Prevent session selection
                const sessionId = this.dataset.sessionId;
                const sessionTitle = this.dataset.sessionTitle;
                deleteSession(sessionId, sessionTitle);
            });
            
            // Add to the top of the list
            sessionsList.insertBefore(sessionElement, sessionsList.firstChild);
            
            // Add new session highlight animation
            sessionElement.style.transform = 'scale(0.9)';
            sessionElement.style.opacity = '0';
            setTimeout(() => {
                sessionElement.style.transition = 'all 0.3s ease';
                sessionElement.style.transform = 'scale(1)';
                sessionElement.style.opacity = '1';
                
                // Add temporary glow effect
                sessionElement.style.boxShadow = '0 0 20px rgba(78, 205, 196, 0.5)';
                setTimeout(() => {
                    sessionElement.style.boxShadow = '';
                }, 2000);
            }, 50);
            
            // Remove the "no sessions" message if it exists
            const noSessionsMsg = document.querySelector('.cosmic-empty-state');
            if (noSessionsMsg) {
                noSessionsMsg.remove();
                
                // Add the sessions header
                const sessionsContainer = document.querySelector('.cosmic-sessions-container');
                if (sessionsContainer && !sessionsContainer.querySelector('.cosmic-section-label')) {
                    const header = document.createElement('h6');
                    header.className = 'cosmic-section-label';
                    header.textContent = 'Phiên gần đây';
                    sessionsContainer.insertBefore(header, sessionsList);
                }
            }
        }
        
        function showNotification(message, type) {
            // Create notification element
            const notification = document.createElement('div');
            const notificationClass = type === 'success' ? 'success' : 
                                    type === 'info' ? 'info' : 
                                    type === 'warning' ? 'warning' : 'error';
            notification.className = `cosmic-notification cosmic-notification-${notificationClass}`;
            
            const iconClass = type === 'success' ? 'check-circle' : 
                            type === 'info' ? 'info-circle' : 
                            type === 'warning' ? 'exclamation-triangle' : 'exclamation-triangle';
            
            notification.innerHTML = `
                <div class="cosmic-notification-content">
                    <i class="fas fa-${iconClass} me-2"></i>
                    ${message}
                    <button type="button" class="cosmic-notification-close">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;
            
            // Add to page
            document.body.appendChild(notification);
            
            // Close button handler
            notification.querySelector('.cosmic-notification-close').addEventListener('click', () => {
                notification.remove();
            });
            
            // Auto remove after appropriate time
            const autoRemoveTime = type === 'info' ? 3000 : 5000;
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, autoRemoveTime);
        }
        
        function showCosmicConfirmation(title, message, onConfirm) {
            // Create cosmic modal overlay
            const modal = document.createElement('div');
            modal.className = 'cosmic-modal-overlay';
            modal.innerHTML = `
                <div class="cosmic-modal-dialog" data-aos="zoom-in">
                    <div class="cosmic-modal-header">
                        <h5 class="cosmic-modal-title">
                            <i class="fas fa-exclamation-triangle text-warning me-2"></i>
                            ${title}
                        </h5>
                        <button type="button" class="cosmic-modal-close">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="cosmic-modal-body">
                        <p>${message}</p>
                    </div>
                    <div class="cosmic-modal-footer">
                        <button type="button" class="cosmic-btn cosmic-btn-outline cosmic-cancel-btn">
                            <i class="fas fa-times me-2"></i>Hủy
                        </button>
                        <button type="button" class="cosmic-btn cosmic-btn-danger cosmic-confirm-btn">
                            <i class="fas fa-trash-alt me-2"></i>Xóa
                            <span class="btn-glow"></span>
                        </button>
                    </div>
                </div>
            `;
            
            // Add to page
            document.body.appendChild(modal);
            
            // Add event listeners
            modal.querySelector('.cosmic-modal-close').addEventListener('click', () => {
                modal.remove();
            });
            
            modal.querySelector('.cosmic-cancel-btn').addEventListener('click', () => {
                modal.remove();
            });
            
            modal.querySelector('.cosmic-confirm-btn').addEventListener('click', () => {
                modal.remove();
                onConfirm();
            });
            
            // Close on overlay click
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.remove();
                }
            });
            
            // Initialize AOS for the modal
            if (typeof AOS !== 'undefined') {
                AOS.refresh();
            }
        }
        
        function clearChatArea() {
            const chatMessages = document.getElementById('chatMessages');
            const chatTitle = document.getElementById('chatTitle');
            const chatInputArea = document.getElementById('chatInputArea');
            
            // Reset chat title
            chatTitle.innerHTML = '<i class="fas fa-comment-dots me-2"></i>Chọn phiên để bắt đầu trò chuyện';
            
            // Hide chat input
            chatInputArea.style.display = 'none';
            
            // Show welcome message
            chatMessages.innerHTML = `
                <div class="cosmic-welcome-message">
                    <i class="fas fa-robot cosmic-welcome-icon"></i>
                    <h5 class="cosmic-welcome-title">Chào mừng đến với <span class="text-gradient">AI Chat</span></h5>
                    <p class="cosmic-welcome-subtitle">Chọn một phiên trò chuyện từ sidebar hoặc tạo phiên mới để bắt đầu.</p>
                </div>
            `;
        }
        
        function showEmptySessionsState() {
            const sessionsContainer = document.querySelector('.cosmic-sessions-container');
            const sectionLabel = sessionsContainer.querySelector('.cosmic-section-label');
            const sessionsList = sessionsContainer.querySelector('.cosmic-sessions-list');
            
            // Remove the section label if it exists
            if (sectionLabel) {
                sectionLabel.remove();
            }
            
            // Remove the sessions list if it exists
            if (sessionsList) {
                sessionsList.remove();
            }
            
            // Add empty state
            const emptyState = document.createElement('div');
            emptyState.className = 'cosmic-empty-state';
            emptyState.innerHTML = `
                <i class="fas fa-comments cosmic-empty-icon"></i>
                <p class="cosmic-empty-text">Chưa có phiên trò chuyện nào</p>
                <button class="cosmic-btn cosmic-btn-outline" id="createFirstSessionBtn">
                    <i class="fas fa-plus me-2"></i>Tạo phiên đầu tiên
                </button>
            `;
            
            sessionsContainer.appendChild(emptyState);
            
            // Add event listener for the new create button
            emptyState.querySelector('#createFirstSessionBtn').addEventListener('click', createNewSession);
        }
        
        // Helper function to display messages
        function displayMessages(messages) {
            const chatMessages = document.getElementById('chatMessages');
            chatMessages.innerHTML = '';
            
            messages.forEach(message => {
                const messageElement = createMessageElement(message);
                chatMessages.appendChild(messageElement);
            });
            
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }
        
        // Helper function to create message element
        function createMessageElement(message) {
            const messageDiv = document.createElement('div');
            const isUser = message.messageType === 'user';
            messageDiv.className = `cosmic-message ${isUser ? 'cosmic-message-user' : 'cosmic-message-ai'}`;
            
            // Format the date properly
            let formattedTime = '';
            if (message.createdAt) {
                if (typeof message.createdAt === 'string') {
                    // If it's already a string, use it as is or parse it
                    formattedTime = message.createdAt.includes('T') 
                        ? new Date(message.createdAt).toLocaleTimeString('vi-VN', {hour: '2-digit', minute: '2-digit'})
                        : message.createdAt;
                } else {
                    // If it's a Date object, format it
                    formattedTime = new Date(message.createdAt).toLocaleTimeString('vi-VN', {hour: '2-digit', minute: '2-digit'});
                }
            } else {
                formattedTime = new Date().toLocaleTimeString('vi-VN', {hour: '2-digit', minute: '2-digit'});
            }
            
            // Process message content - render markdown for AI messages only
            let processedContent = '';
            if (isUser) {
                // For user messages, just escape HTML and preserve line breaks
                processedContent = escapeHtml(message.content);
            } else {
                // For AI messages, render as markdown
                processedContent = renderMarkdown(message.content);
            }
            
            messageDiv.innerHTML = `
                <div class="cosmic-message-content">
                    <small class="cosmic-message-meta">${message.userName} - ${formattedTime}</small>
                    <div class="cosmic-message-text ${isUser ? '' : 'markdown-content'}">${processedContent}</div>
                    ${message.isEdited ? '<small class="cosmic-message-edited">(đã chỉnh sửa)</small>' : ''}
                </div>
            `;
            
            // Highlight code blocks if it's an AI message
            if (!isUser) {
                const codeBlocks = messageDiv.querySelectorAll('pre code');
                codeBlocks.forEach(block => {
                    if (typeof hljs !== 'undefined') {
                        hljs.highlightElement(block);
                    }
                });
            }
            
            return messageDiv;
        }
        
        // Helper function to escape HTML
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML.replace(/\n/g, '<br>');
        }
    </script>
    
    <!-- Highlight.js CSS for code syntax highlighting -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/vs2015.min.css">
    
    <style>
        :root {
            --cosmic-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --cosmic-secondary: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --cosmic-success: linear-gradient(135deg, #10ac84 0%, #1dd1a1 100%);
            --cosmic-info: linear-gradient(135deg, #3742fa 0%, #2f3542 100%);
            --cosmic-warning: linear-gradient(135deg, #ffa801 0%, #ff6348 100%);
            --cosmic-danger: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
            --cosmic-dark: linear-gradient(135deg, #0c0c0c 0%, #1a1a2e 50%, #16213e 100%);
            --glass-bg: rgba(255, 255, 255, 0.1);
            --glass-border: rgba(255, 255, 255, 0.2);
            --cosmic-text: #4ecdc4;
            --stellar-gold: #ffd700;
        }

        /* Cosmic Dashboard Section */
        .cosmic-dashboard-section {
            min-height: 100vh;
            background: var(--cosmic-dark);
            position: relative;
            overflow: hidden;
        }

        .cosmic-background {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(ellipse at 25% 25%, rgba(255, 215, 0, 0.1) 0%, transparent 50%),
                radial-gradient(ellipse at 75% 75%, rgba(102, 126, 234, 0.1) 0%, transparent 50%),
                radial-gradient(ellipse at 50% 50%, rgba(118, 75, 162, 0.05) 0%, transparent 70%);
        }

        .dashboard-particles {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }

        .particle {
            position: absolute;
            width: 2px;
            height: 2px;
            background: var(--stellar-gold);
            border-radius: 50%;
            animation: floatParticle 4s infinite ease-in-out;
            box-shadow: 0 0 6px var(--stellar-gold);
        }

        .floating-stars {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }

        .star {
            position: absolute;
            width: 1px;
            height: 1px;
            background: white;
            border-radius: 50%;
            animation: twinkle 3s infinite ease-in-out;
            box-shadow: 0 0 4px white;
        }

        @@keyframes floatParticle {
            0%, 100% { transform: translateY(0px) rotate(0deg); opacity: 1; }
            50% { transform: translateY(-20px) rotate(180deg); opacity: 0.3; }
        }

        @@keyframes twinkle {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.3; transform: scale(1.5); }
        }

        /* Layout */
        .cosmic-container-fluid {
            position: relative;
            z-index: 2;
            padding: 0;
        }

        .cosmic-row {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .cosmic-sidebar {
            width: 350px;
            background: var(--glass-bg);
            border-right: 1px solid var(--glass-border);
            backdrop-filter: blur(20px);
            position: sticky;
            top: 0;
            height: 100vh;
            overflow-y: auto;
        }

        .cosmic-sidebar-content {
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        .cosmic-sidebar-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--glass-border);
        }

        .cosmic-sidebar-title {
            color: white;
            margin: 0;
            font-weight: 600;
        }

        .cosmic-icon {
            color: var(--cosmic-text);
        }

        .cosmic-sidebar-section {
            padding: 1.5rem;
            border-bottom: 1px solid var(--glass-border);
        }

        .cosmic-sessions-container {
            flex-grow: 1;
            padding: 1.5rem;
        }

        .cosmic-section-label {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
            margin-bottom: 1rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .cosmic-sessions-list {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .cosmic-session-item {
            position: relative;
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: 12px;
            padding: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            overflow: hidden;
        }

        .cosmic-session-item:hover {
            background: rgba(255, 255, 255, 0.15);
            transform: translateX(5px);
            border-color: var(--cosmic-text);
        }

        .cosmic-session-item.active {
            background: rgba(78, 205, 196, 0.1);
            border-color: var(--cosmic-text);
            box-shadow: 0 0 20px rgba(78, 205, 196, 0.3);
        }

        .session-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 0.5rem;
        }

        .session-title {
            color: white;
            font-size: 0.95rem;
            font-weight: 600;
            margin: 0;
            max-width: 180px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .session-actions {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .session-date {
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.8rem;
            white-space: nowrap;
        }

        .cosmic-delete-btn {
            background: none;
            border: none;
            color: rgba(255, 255, 255, 0.4);
            cursor: pointer;
            padding: 4px;
            border-radius: 4px;
            font-size: 0.75rem;
            transition: all 0.3s ease;
            opacity: 0;
            transform: scale(0.8);
        }

        .cosmic-session-item:hover .cosmic-delete-btn {
            opacity: 1;
            transform: scale(1);
        }

        .cosmic-delete-btn:hover {
            color: #ff6b6b;
            background: rgba(255, 107, 107, 0.1);
            transform: scale(1.1);
        }

        .cosmic-delete-btn:active {
            transform: scale(0.95);
        }

        .session-description {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.85rem;
            margin: 0 0 0.5rem 0;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .session-time {
            color: rgba(255, 255, 255, 0.5);
            font-size: 0.8rem;
        }

        .cosmic-session-glow {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: var(--cosmic-secondary);
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
            z-index: -1;
        }

        .cosmic-session-item:hover .cosmic-session-glow {
            opacity: 0.1;
        }

        .cosmic-empty-state {
            text-align: center;
            padding: 2rem 1rem;
            color: rgba(255, 255, 255, 0.6);
        }

        .cosmic-empty-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
            opacity: 0.5;
        }

        .cosmic-empty-text {
            margin-bottom: 1.5rem;
            font-size: 0.95rem;
        }

        /* User Info */
        .cosmic-user-info {
            display: flex;
            align-items: center;
            padding: 1.5rem;
            border-top: 1px solid var(--glass-border);
            margin-top: auto;
        }

        .cosmic-user-avatar {
            margin-right: 1rem;
            color: var(--cosmic-text);
            font-size: 2rem;
        }

        .cosmic-user-details {
            flex-grow: 1;
        }

        .cosmic-user-name {
            color: white;
            font-weight: 600;
            font-size: 0.9rem;
        }

        .cosmic-user-role {
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.8rem;
        }

        /* Main Content */
        .cosmic-main-content {
            flex: 1;
            background: rgba(255, 255, 255, 0.02);
        }

        .cosmic-content-wrapper {
            padding: 2rem;
        }

        .cosmic-dashboard-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 2rem;
        }

        .cosmic-dashboard-title {
            color: white;
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .cosmic-welcome-text {
            color: rgba(255, 255, 255, 0.8);
            margin: 0;
            font-size: 1.1rem;
        }

        .cosmic-date-info {
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.9rem;
        }

        .text-gradient {
            background: linear-gradient(135deg, #4ecdc4 0%, #44a08d 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        /* Stats */
        .cosmic-stats-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .cosmic-stat-card {
            position: relative;
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: 16px;
            padding: 1.5rem;
            backdrop-filter: blur(20px);
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .cosmic-stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);
        }

        .cosmic-stat-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .cosmic-stat-label {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
        }

        .cosmic-stat-value {
            color: white;
            font-size: 2rem;
            font-weight: 700;
        }

        .cosmic-stat-value-small {
            color: white;
            font-size: 1.2rem;
            font-weight: 600;
        }

        .cosmic-stat-icon {
            color: white;
            font-size: 2rem;
            opacity: 0.8;
        }

        .cosmic-stat-primary {
            border-color: rgba(102, 126, 234, 0.3);
        }

        .cosmic-stat-success {
            border-color: rgba(16, 172, 132, 0.3);
        }

        .cosmic-stat-info {
            border-color: rgba(55, 66, 250, 0.3);
        }

        .cosmic-stat-glow {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: var(--cosmic-primary);
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
            z-index: -1;
        }

        .cosmic-stat-card:hover .cosmic-stat-glow {
            opacity: 0.1;
        }

        /* Chat Section */
        .cosmic-chat-section {
            margin-bottom: 2rem;
        }

        .cosmic-chat-card {
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: 20px;
            backdrop-filter: blur(20px);
            overflow: hidden;
        }

        .cosmic-chat-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--glass-border);
        }

        .cosmic-chat-title {
            color: white;
            margin: 0;
            font-size: 1.2rem;
            font-weight: 600;
        }

        .cosmic-chat-body {
            display: flex;
            flex-direction: column;
            height: 500px;
        }

        .cosmic-chat-messages {
            flex-grow: 1;
            padding: 1.5rem;
            overflow-y: auto;
            background: rgba(0, 0, 0, 0.1);
        }

        .cosmic-welcome-message {
            text-align: center;
            padding: 3rem 1rem;
            color: rgba(255, 255, 255, 0.7);
        }

        .cosmic-welcome-icon {
            font-size: 4rem;
            margin-bottom: 1.5rem;
            opacity: 0.5;
            color: var(--cosmic-text);
        }

        .cosmic-welcome-title {
            color: white;
            margin-bottom: 1rem;
            font-size: 1.5rem;
        }

        .cosmic-welcome-subtitle {
            font-size: 1rem;
            margin: 0;
        }

        /* Chat Input */
        .cosmic-chat-input {
            padding: 1.5rem;
            border-top: 1px solid var(--glass-border);
        }

        .cosmic-input-wrapper {
            display: flex;
            gap: 0.75rem;
            align-items: center;
        }

        .cosmic-message-input {
            flex: 1;
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: 25px;
            padding: 12px 20px;
            color: white;
            font-size: 0.95rem;
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }

        .cosmic-message-input:focus {
            outline: none;
            border-color: var(--cosmic-text);
            box-shadow: 0 0 20px rgba(78, 205, 196, 0.3);
            background: rgba(255, 255, 255, 0.15);
        }

        .cosmic-message-input::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

        .cosmic-send-btn {
            position: relative;
            width: 50px;
            height: 50px;
            background: var(--cosmic-primary);
            border: none;
            border-radius: 50%;
            color: white;
            font-size: 1.1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            overflow: hidden;
        }

        .cosmic-send-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 0 25px rgba(78, 205, 196, 0.5);
        }

        /* Messages */
        .cosmic-message {
            margin-bottom: 1rem;
            max-width: 75%;
            word-wrap: break-word;
        }
        
        .cosmic-message-user {
            margin-left: auto;
        }

        .cosmic-message-ai {
            margin-right: auto;
        }

        .cosmic-message-content {
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: 12px;
            padding: 1rem;
            backdrop-filter: blur(10px);
        }

        .cosmic-message-user .cosmic-message-content {
            background: var(--cosmic-primary);
            border-color: rgba(102, 126, 234, 0.3);
        }

        .cosmic-message-meta {
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.8rem;
            display: block;
            margin-bottom: 0.25rem;
        }

        .cosmic-message-text {
            color: white;
            white-space: pre-wrap;
            word-wrap: break-word;
        }

        .cosmic-message-edited {
            color: rgba(255, 255, 255, 0.5);
            font-size: 0.8rem;
            font-style: italic;
            margin-top: 0.25rem;
            display: block;
        }

        /* Markdown Content Styling for AI Messages */
        .markdown-content {
            line-height: 1.6;
        }

        .markdown-content h1, 
        .markdown-content h2, 
        .markdown-content h3, 
        .markdown-content h4, 
        .markdown-content h5, 
        .markdown-content h6 {
            color: var(--cosmic-text);
            font-weight: 600;
            margin: 1rem 0 0.5rem 0;
            line-height: 1.3;
        }

        .markdown-content h1 { font-size: 1.5rem; }
        .markdown-content h2 { font-size: 1.3rem; }
        .markdown-content h3 { font-size: 1.2rem; }
        .markdown-content h4 { font-size: 1.1rem; }
        .markdown-content h5 { font-size: 1.05rem; }
        .markdown-content h6 { font-size: 1rem; }

        .markdown-content p {
            margin: 0 0 1rem 0;
            word-wrap: break-word;
        }

        .markdown-content strong, 
        .markdown-content b {
            color: var(--stellar-gold);
            font-weight: 600;
        }

        .markdown-content em, 
        .markdown-content i {
            color: rgba(255, 255, 255, 0.9);
            font-style: italic;
        }

        .markdown-content ul, 
        .markdown-content ol {
            margin: 0.5rem 0;
            padding-left: 1.5rem;
        }

        .markdown-content li {
            margin: 0.25rem 0;
            color: rgba(255, 255, 255, 0.9);
        }

        .markdown-content li::marker {
            color: var(--cosmic-text);
        }

        .markdown-content blockquote {
            background: rgba(78, 205, 196, 0.1);
            border-left: 4px solid var(--cosmic-text);
            margin: 1rem 0;
            padding: 0.5rem 1rem;
            border-radius: 0 8px 8px 0;
            font-style: italic;
            color: rgba(255, 255, 255, 0.9);
        }

        .markdown-content code:not(pre code) {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 4px;
            padding: 2px 6px;
            font-family: 'Fira Code', 'Consolas', 'Monaco', monospace;
            font-size: 0.9em;
            color: var(--stellar-gold);
        }

        .markdown-content pre {
            background: rgba(0, 0, 0, 0.4);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 8px;
            margin: 1rem 0;
            padding: 1rem;
            overflow-x: auto;
            position: relative;
        }

        .markdown-content pre code {
            background: none;
            border: none;
            padding: 0;
            font-family: 'Fira Code', 'Consolas', 'Monaco', monospace;
            font-size: 0.9em;
            line-height: 1.4;
            color: #f8f8f2;
        }

        .markdown-content a {
            color: var(--cosmic-text);
            text-decoration: none;
            border-bottom: 1px solid transparent;
            transition: all 0.3s ease;
        }

        .markdown-content a:hover {
            color: var(--stellar-gold);
            border-bottom-color: var(--stellar-gold);
        }

        .markdown-content table {
            width: 100%;
            border-collapse: collapse;
            margin: 1rem 0;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 8px;
            overflow: hidden;
        }

        .markdown-content th, 
        .markdown-content td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .markdown-content th {
            background: rgba(78, 205, 196, 0.2);
            color: var(--cosmic-text);
            font-weight: 600;
        }

        .markdown-content td {
            color: rgba(255, 255, 255, 0.9);
        }

        .markdown-content tr:last-child td {
            border-bottom: none;
        }

        /* Code block with language labels */
        .markdown-content pre[data-language]::before {
            content: attr(data-language);
            position: absolute;
            top: 0.5rem;
            right: 0.75rem;
            background: rgba(78, 205, 196, 0.2);
            color: var(--cosmic-text);
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.8rem;
            font-weight: 500;
            text-transform: uppercase;
        }

        /* Custom highlight.js theme adjustments */
        .markdown-content .hljs {
            background: transparent !important;
            padding: 0 !important;
        }

        /* Streaming content improvements */
        .cosmic-streaming-content.markdown-content::after {
            content: '▊';
            color: var(--cosmic-text);
            animation: blink 1s infinite;
            margin-left: 2px;
        }

        /* Typing Indicators */
        .cosmic-typing-dots {
            display: inline-block;
        }
        
        .cosmic-typing-dots span {
            display: inline-block;
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background-color: var(--cosmic-text);
            margin: 0 1px;
            animation: typing 1.4s infinite ease-in-out;
        }
        
        .cosmic-typing-dots span:nth-child(1) {
            animation-delay: -0.32s;
        }
        
        .cosmic-typing-dots span:nth-child(2) {
            animation-delay: -0.16s;
        }
        
        @@keyframes typing {
            0%, 80%, 100% {
                transform: scale(0);
                opacity: 0.5;
            }
            40% {
                transform: scale(1);
                opacity: 1;
            }
        }
        
        /* Streaming */
        .cosmic-streaming-indicator {
            color: var(--cosmic-text);
            font-weight: bold;
            animation: pulse 1.5s infinite;
        }
        
        .cosmic-streaming-content {
            white-space: pre-wrap;
            word-wrap: break-word;
            min-height: 20px;
            position: relative;
            color: white;
        }
        
        .cosmic-streaming-content::after {
            content: '▊';
            color: var(--cosmic-text);
            animation: blink 1s infinite;
        }
        
        @@keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        
        @@keyframes blink {
            0%, 50% { opacity: 1; }
            51%, 100% { opacity: 0; }
        }
        
        /* Loading States */
        .cosmic-loading-state {
            text-align: center;
            padding: 2rem;
            color: rgba(255, 255, 255, 0.7);
        }

        .cosmic-spinner {
            width: 40px;
            height: 40px;
            border: 3px solid rgba(78, 205, 196, 0.3);
            border-top: 3px solid var(--cosmic-text);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .cosmic-loading-text {
            margin: 0;
        }

        .cosmic-error-state {
            text-align: center;
            padding: 2rem;
            color: #ff6b6b;
        }

        .cosmic-error-message {
            margin-bottom: 1rem;
            text-align: center;
        }

        .cosmic-error-content {
            background: rgba(255, 107, 107, 0.1);
            border: 1px solid rgba(255, 107, 107, 0.3);
            border-radius: 8px;
            padding: 1rem;
            color: #ff6b6b;
            display: inline-block;
        }

        /* Quick Actions */
        .cosmic-actions-section {
            margin-bottom: 2rem;
        }

        .cosmic-actions-card {
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: 20px;
            backdrop-filter: blur(20px);
            overflow: hidden;
        }

        .cosmic-actions-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--glass-border);
        }

        .cosmic-actions-title {
            color: white;
            margin: 0;
            font-size: 1.2rem;
            font-weight: 600;
        }

        .cosmic-actions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            padding: 1.5rem;
        }

        .cosmic-action-btn {
            position: relative;
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: 12px;
            padding: 1.5rem;
            color: white;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            overflow: hidden;
        }

        .cosmic-action-btn:hover {
            transform: translateY(-3px);
            border-color: var(--cosmic-text);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        }

        .cosmic-action-btn i {
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
            display: block;
            color: var(--cosmic-text);
        }

        .cosmic-action-btn span {
            font-size: 0.9rem;
            font-weight: 500;
        }

        .cosmic-action-glow {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: var(--cosmic-secondary);
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
            z-index: -1;
        }

        .cosmic-action-btn:hover .cosmic-action-glow {
            opacity: 0.1;
        }

        /* Buttons */
        .cosmic-btn {
            position: relative;
            padding: 12px 24px;
            border: none;
            border-radius: 12px;
            font-weight: 600;
            font-size: 0.95rem;
            cursor: pointer;
            overflow: hidden;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(10px);
        }

        .cosmic-btn-primary {
            background: var(--cosmic-primary);
            color: white;
            border: 1px solid rgba(78, 205, 196, 0.3);
        }

        .cosmic-btn-outline {
            background: var(--glass-bg);
            color: white;
            border: 1px solid var(--glass-border);
        }

        .cosmic-btn-settings {
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            color: rgba(255, 255, 255, 0.7);
            padding: 8px 12px;
            font-size: 0.9rem;
        }

        .cosmic-btn-danger {
            background: var(--cosmic-danger);
            color: white;
            border: 1px solid rgba(255, 107, 107, 0.3);
        }

        .cosmic-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(78, 205, 196, 0.3);
        }

        .btn-glow {
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.6s;
        }

        .cosmic-btn:hover .btn-glow {
            left: 100%;
        }

        /* Connection Status */
        .cosmic-connection-status {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1050;
            padding: 8px 12px;
            border-radius: 8px;
            font-size: 0.875rem;
            backdrop-filter: blur(10px);
            border: 1px solid;
            transition: all 0.3s ease;
        }
        
        .cosmic-connection-status.connected {
            background: rgba(16, 172, 132, 0.1);
            color: #10ac84;
            border-color: rgba(16, 172, 132, 0.3);
        }

        .cosmic-connection-status.disconnected {
            background: rgba(255, 107, 107, 0.1);
            color: #ff6b6b;
            border-color: rgba(255, 107, 107, 0.3);
        }

        .cosmic-connection-status.connecting {
            background: rgba(255, 168, 1, 0.1);
            color: #ffa801;
            border-color: rgba(255, 168, 1, 0.3);
        }

        /* Notifications */
        .cosmic-notification {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            max-width: 350px;
            background: var(--glass-bg);
            border: 1px solid;
            border-radius: 12px;
            backdrop-filter: blur(20px);
            animation: slideInRight 0.3s ease;
        }

        .cosmic-notification-success {
            border-color: rgba(16, 172, 132, 0.3);
            color: #10ac84;
        }

        .cosmic-notification-info {
            border-color: rgba(55, 66, 250, 0.3);
            color: #3742fa;
        }

        .cosmic-notification-error {
            border-color: rgba(255, 107, 107, 0.3);
            color: #ff6b6b;
        }

        .cosmic-notification-warning {
            border-color: rgba(255, 168, 1, 0.3);
            color: #ffa801;
        }

        .cosmic-notification-content {
            padding: 1rem;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .cosmic-notification-close {
            background: none;
            border: none;
            color: inherit;
            cursor: pointer;
            padding: 0;
            margin-left: 1rem;
            opacity: 0.7;
            transition: opacity 0.3s ease;
        }

        .cosmic-notification-close:hover {
            opacity: 1;
        }

        @@keyframes slideInRight {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        /* Dropdown */
        .cosmic-dropdown-menu {
            background: var(--glass-bg) !important;
            border: 1px solid var(--glass-border) !important;
            backdrop-filter: blur(20px);
            border-radius: 12px !important;
        }

        .cosmic-dropdown-item {
            color: rgba(255, 255, 255, 0.8) !important;
            transition: all 0.3s ease;
        }

        .cosmic-dropdown-item:hover {
            background: rgba(255, 255, 255, 0.1) !important;
            color: white !important;
        }

        .cosmic-dropdown-divider {
            border-color: var(--glass-border) !important;
        }

        /* Cosmic Modal */
        .cosmic-modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(5px);
            z-index: 9999;
            display: flex;
            align-items: center;
            justify-content: center;
            animation: fadeIn 0.3s ease;
        }

        .cosmic-modal-dialog {
            background: var(--glass-bg);
            border: 1px solid var(--glass-border);
            border-radius: 20px;
            backdrop-filter: blur(20px);
            box-shadow: 0 25px 80px rgba(0, 0, 0, 0.5);
            max-width: 500px;
            width: 90%;
            overflow: hidden;
        }

        .cosmic-modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--glass-border);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .cosmic-modal-title {
            color: white;
            margin: 0;
            font-size: 1.2rem;
            font-weight: 600;
        }

        .cosmic-modal-close {
            background: none;
            border: none;
            color: rgba(255, 255, 255, 0.6);
            cursor: pointer;
            padding: 8px;
            border-radius: 50%;
            transition: all 0.3s ease;
            font-size: 1rem;
        }

        .cosmic-modal-close:hover {
            color: white;
            background: rgba(255, 255, 255, 0.1);
        }

        .cosmic-modal-body {
            padding: 1.5rem;
            color: rgba(255, 255, 255, 0.9);
        }

        .cosmic-modal-body p {
            margin: 0;
            line-height: 1.5;
        }

        .cosmic-modal-footer {
            padding: 1.5rem;
            border-top: 1px solid var(--glass-border);
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
        }

        @@keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
    </style>
} 