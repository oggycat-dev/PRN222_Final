@page
@model FinalProject.Pages.NovelsModel
@{
    ViewData["Title"] = "Thư viện tiểu thuyết";
    Layout = "_Layout";
}

<!-- Include SignalR Notification Toast -->
@await Html.PartialAsync("_NotificationToast")

<!-- Novels Library Section -->
<div class="novels-library-section">
    <div class="container-fluid">
        <div class="row">
            <!-- Main Content Area -->
            <div class="@(Model.IsUserLoggedIn && Model.UserRole.ToLower() != "translator" ? "col-9" : "col-12")">
                <!-- Header -->
                <div class="row">
                    <div class="col-12">
                        <div class="library-header text-center mb-5">
                            <h1 class="display-4 fw-bold text-gradient mb-3">
                                <i class="fas fa-book-open me-3"></i>Thư viện tiểu thuyết
                            </h1>
                            <p class="lead text-muted">Khám phá thế giới văn học phong phú với @Model.TotalNovels tác phẩm</p>
                        </div>
                    </div>
                </div>

                <!-- Search and Filter Section -->
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="search-filter-card">
                            <form method="get" class="row g-3 align-items-end">
                                <!-- Search -->
                                <div class="col-4">
                                    <label for="SearchTerm" class="form-label">
                                        <i class="fas fa-search me-2"></i>Tìm kiếm
                                    </label>
                                    <input asp-for="SearchTerm" class="form-control" placeholder="Tìm theo tên, tác giả, mô tả...">
                                </div>

                                <!-- Category Filter -->
                                <div class="col-3">
                                    <label for="CategoryId" class="form-label">
                                        <i class="fas fa-filter me-2"></i>Thể loại
                                    </label>
                                    <select asp-for="CategoryId" class="form-select">
                                        <option value="">Tất cả thể loại</option>
                                        @foreach (var category in Model.Categories)
                                        {
                                            <option value="@category.Id">@category.Name</option>
                                        }
                                    </select>
                                </div>

                                <!-- Status Filter -->
                                <div class="col-3">
                                    <label for="Status" class="form-label">
                                        <i class="fas fa-info-circle me-2"></i>Trạng thái
                                    </label>
                                    <select asp-for="Status" class="form-select">
                                        <option value="">Tất cả trạng thái</option>
                                        <option value="0">Đang tiến hành</option>
                                        <option value="1">Hoàn thành</option>
                                        <option value="2">Tạm dừng</option>
                                        <option value="3">Bỏ dở</option>
                                    </select>
                                </div>

                                <!-- Submit Button -->
                                <div class="col-2">
                                    <button type="submit" class="btn btn-primary w-100">
                                        <i class="fas fa-search me-2"></i>Lọc
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>

                <!-- Results Info -->
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="results-info d-flex justify-content-between align-items-center">
                            <div>
                                <h5 class="mb-0">
                                    Hiển thị @Model.Novels.Count trong tổng số @Model.TotalNovels tiểu thuyết
                                    @if (!string.IsNullOrWhiteSpace(Model.SearchTerm) || Model.CategoryId.HasValue)
                                    {
                                        <span class="text-muted">(đã lọc)</span>
                                    }
                                </h5>
                            </div>
                            <div class="pagination-info">
                                <small class="text-muted">
                                    Trang @Model.CurrentPage / @Model.TotalPages
                                </small>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Novels Grid -->
                <div class="row" id="novels-grid">
            @if (Model.Novels.Any())
            {
                @foreach (var novel in Model.Novels)
                {
                    <div class="col-3 mb-4" data-aos="fade-up">
                        <div class="novel-card h-100" onclick="viewNovel(@novel.Id)" style="cursor: pointer;">
                            <!-- Novel Image -->
                            <div class="novel-image-container">
                                @if (!string.IsNullOrEmpty(novel.ImageUrl))
                                {
                                    <img src="@novel.ImageUrl" alt="@novel.Title" class="novel-image">
                                }
                                else
                                {
                                    <div class="novel-placeholder">
                                        <i class="fas fa-book fa-3x"></i>
                                    </div>
                                }
                                
                                <!-- Status Badge -->
                                <div class="status-badge">
                                    @switch (novel.Status)
                                    {
                                        case DAL.Entities.NovelStatus.Ongoing:
                                            <span class="badge bg-success">Đang tiến hành</span>
                                            break;
                                        case DAL.Entities.NovelStatus.Completed:
                                            <span class="badge bg-primary">Hoàn thành</span>
                                            break;
                                        case DAL.Entities.NovelStatus.Hiatus:
                                            <span class="badge bg-warning">Tạm dừng</span>
                                            break;
                                        case DAL.Entities.NovelStatus.Dropped:
                                            <span class="badge bg-danger">Bỏ dở</span>
                                            break;
                                    }
                                </div>

                                <!-- Rating -->
                                @if (novel.Rating > 0)
                                {
                                    <div class="rating-badge">
                                        <span class="badge bg-warning text-dark">
                                            <i class="fas fa-star"></i> @novel.Rating.ToString("0.0")
                                        </span>
                                    </div>
                                }
                            </div>

                            <!-- Novel Info -->
                            <div class="novel-card-body">
                                <h5 class="novel-title">@novel.Title</h5>
                                
                                <div class="novel-meta mb-2">
                                    <small class="text-muted">
                                        <i class="fas fa-user me-1"></i>@novel.AuthorName
                                    </small>
                                </div>

                                <p class="novel-description">
                                    @if (!string.IsNullOrEmpty(novel.ShortDescription))
                                    {
                                        @(novel.ShortDescription.Length > 100 ? novel.ShortDescription.Substring(0, 100) + "..." : novel.ShortDescription)
                                    }
                                    else
                                    {
                                        <em class="text-muted">Chưa có mô tả</em>
                                    }
                                </p>

                                <!-- Categories -->
                                @if (novel.CategoryNames != null && novel.CategoryNames.Any())
                                {
                                    <div class="novel-categories mb-3">
                                        @foreach (var categoryName in novel.CategoryNames.Take(3))
                                        {
                                            <span class="badge bg-secondary me-1">@categoryName</span>
                                        }
                                        @if (novel.CategoryNames.Count() > 3)
                                        {
                                            <span class="badge bg-light text-dark">+@(novel.CategoryNames.Count() - 3)</span>
                                        }
                                    </div>
                                }

                                <!-- Stats -->
                                <div class="novel-stats d-flex justify-content-between align-items-center">
                                    <div class="stats-left">
                                        <small class="text-muted">
                                            <i class="fas fa-eye me-1"></i>@novel.ViewCount.ToString("N0")
                                        </small>
                                        <small class="text-muted ms-3">
                                            <i class="fas fa-book-open me-1"></i>@novel.ChapterCount chương
                                        </small>
                                    </div>
                                    <div class="stats-right">
                                        <small class="text-muted">
                                            @novel.CreatedAt.ToString("dd/MM/yyyy")
                                        </small>
                                    </div>
                                </div>
                            </div>

                            <!-- Action Buttons -->
                            <div class="novel-card-footer">
                                <button class="btn btn-primary btn-sm flex-fill" onclick="event.stopPropagation(); viewNovel(@novel.Id)">
                                    <i class="fas fa-book-reader me-2"></i>Đọc truyện
                                </button>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="col-12">
                    <div class="no-results text-center py-5">
                        <i class="fas fa-search fa-4x text-muted mb-4"></i>
                        <h4 class="text-muted">Không tìm thấy tiểu thuyết nào</h4>
                        <p class="text-muted mb-4">
                            @if (!string.IsNullOrWhiteSpace(Model.SearchTerm) || Model.CategoryId.HasValue)
                            {
                                @:Thử thay đổi từ khóa tìm kiếm hoặc bộ lọc để tìm thấy kết quả phù hợp.
                            }
                            else
                            {
                                @:Hiện tại chưa có tiểu thuyết nào trong thư viện.
                            }
                        </p>
                        @if (!string.IsNullOrWhiteSpace(Model.SearchTerm) || Model.CategoryId.HasValue)
                        {
                            <a href="/Novels" class="btn btn-primary">
                                <i class="fas fa-refresh me-2"></i>Xem tất cả
                            </a>
                        }
                    </div>
                </div>
            }
        </div>

        <!-- Pagination -->
        @if (Model.TotalPages > 1)
        {
            <div class="row mt-5">
                <div class="col-12">
                    <nav aria-label="Phân trang tiểu thuyết">
                        <ul class="pagination pagination-lg justify-content-center">
                            <!-- Previous Page -->
                            @if (Model.HasPreviousPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Model.GetPageUrl(Model.CurrentPage - 1)">
                                        <i class="fas fa-chevron-left"></i>
                                    </a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">
                                        <i class="fas fa-chevron-left"></i>
                                    </span>
                                </li>
                            }

                            <!-- Page Numbers -->
                            @{
                                int startPage = Math.Max(1, Model.CurrentPage - 2);
                                int endPage = Math.Min(Model.TotalPages, Model.CurrentPage + 2);
                                
                                if (startPage > 1)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="@Model.GetPageUrl(1)">1</a>
                                    </li>
                                    if (startPage > 2)
                                    {
                                        <li class="page-item disabled">
                                            <span class="page-link">...</span>
                                        </li>
                                    }
                                }

                                for (int i = startPage; i <= endPage; i++)
                                {
                                    if (i == Model.CurrentPage)
                                    {
                                        <li class="page-item active">
                                            <span class="page-link">@i</span>
                                        </li>
                                    }
                                    else
                                    {
                                        <li class="page-item">
                                            <a class="page-link" href="@Model.GetPageUrl(i)">@i</a>
                                        </li>
                                    }
                                }

                                if (endPage < Model.TotalPages)
                                {
                                    if (endPage < Model.TotalPages - 1)
                                    {
                                        <li class="page-item disabled">
                                            <span class="page-link">...</span>
                                        </li>
                                    }
                                    <li class="page-item">
                                        <a class="page-link" href="@Model.GetPageUrl(Model.TotalPages)">@Model.TotalPages</a>
                                    </li>
                                }
                            }

                            <!-- Next Page -->
                            @if (Model.HasNextPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Model.GetPageUrl(Model.CurrentPage + 1)">
                                        <i class="fas fa-chevron-right"></i>
                                    </a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item disabled">
                                    <span class="page-link">
                                        <i class="fas fa-chevron-right"></i>
                                    </span>
                                </li>
                            }
                        </ul>
                    </nav>
                </div>
            </div>
        }
            </div>

            <!-- Sidebar for Logged-in Users -->
            @if (Model.IsUserLoggedIn)
            {
                <div class="col-3">
                    <div class="user-sidebar">
                        <!-- User Info Card -->
                        <div class="sidebar-card user-info-card mb-4">
                            <div class="sidebar-card-header">
                                <h5><i class="fas fa-user-circle me-2"></i>Thông tin người dùng</h5>
                            </div>
                            <div class="sidebar-card-body">
                                <div class="user-info">
                                    <div class="user-avatar">
                                        <i class="fas fa-user-circle fa-3x text-primary"></i>
                                    </div>
                                    <div class="user-details">
                                        <h6 class="user-name">@Model.FullName</h6>
                                        <p class="user-role text-muted">@Model.UserRole</p>
                                        <div class="user-coins">
                                            <span class="coins-label">
                                                <i class="fas fa-coins text-warning me-2"></i>Coins:
                                            </span>
                                            <span class="coins-amount fw-bold text-warning">@Model.UserCoins.ToString("N0")</span>
                                        </div>
                                        <div class="user-actions mt-3">
                                            <button class="btn btn-warning btn-sm w-100" onclick="showCoinPurchaseModal()">
                                                <i class="fas fa-plus me-2"></i>Mua Coins
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Novels Section -->
                        <div class="sidebar-card novels-section-card mb-4">
                            <div class="sidebar-card-header">
                                <h5><i class="fas fa-book me-2"></i>Quản lý tiểu thuyết</h5>
                            </div>
                            <div class="sidebar-card-body">
                                <div class="sidebar-menu">
                                    @if (Model.UserRole.ToLower() == "admin")
                                    {
                                        <a href="/Admin/Dashboard" class="sidebar-menu-item">
                                            <i class="fas fa-tachometer-alt me-2"></i>Admin Dashboard
                                        </a>
                                        <a href="/Admin/Novels" class="sidebar-menu-item">
                                            <i class="fas fa-book-open me-2"></i>Quản lý tác phẩm
                                        </a>
                                        <a href="/Admin/Users" class="sidebar-menu-item">
                                            <i class="fas fa-users me-2"></i>Quản lý người dùng
                                        </a>
                                    }
                                    else if (Model.UserRole.ToLower() == "translator")
                                    {
                                        <a href="/Staff/Dashboard" class="sidebar-menu-item">
                                            <i class="fas fa-language me-2"></i>Staff Dashboard
                                        </a>
                                        <a href="/Staff/Novels" class="sidebar-menu-item">
                                            <i class="fas fa-book-open me-2"></i>Quản lý tác phẩm
                                        </a>
                                        <a href="/Staff/Categories" class="sidebar-menu-item">
                                            <i class="fas fa-tags me-2"></i>Quản lý thể loại
                                        </a>
                                    }
                                    else
                                    {
                                        <a href="/User/Dashboard" class="sidebar-menu-item">
                                            <i class="fas fa-tachometer-alt me-2"></i>Dashboard
                                        </a>
                                        <div class="sidebar-menu-item disabled">
                                            <i class="fas fa-heart me-2"></i>Yêu thích (Sắp có)
                                        </div>
                                        <div class="sidebar-menu-item disabled">
                                            <i class="fas fa-history me-2"></i>Lịch sử đọc (Sắp có)
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>

                        <!-- Chatbot Section -->
                        <div class="sidebar-card chatbot-section-card">
                            <div class="sidebar-card-header">
                                <h5><i class="fas fa-robot me-2"></i>AI Chatbot</h5>
                            </div>
                            <div class="sidebar-card-body">
                                <div class="chatbot-info">
                                    <p class="text-muted mb-3">
                                        <i class="fas fa-lightbulb me-2"></i>
                                        Hỏi AI về tiểu thuyết, nhân vật, hoặc bất kỳ thông tin nào bạn cần!
                                    </p>
                                    @if (Model.UserRole.ToLower() == "admin" || Model.UserRole.ToLower() == "translator")
                                    {
                                        <a href="/Admin/PromptSessions" class="btn btn-primary btn-sm w-100 mb-2">
                                            <i class="fas fa-comments me-2"></i>Quản lý Chat
                                        </a>
                                    }
                                    else
                                    {
                                        <a href="/User/Dashboard" class="btn btn-primary btn-sm w-100 mb-2">
                                            <i class="fas fa-comments me-2"></i>Bắt đầu Chat
                                        </a>
                                    }
                                    <div class="chatbot-stats">
                                        <small class="text-muted">
                                            <i class="fas fa-chart-line me-1"></i>
                                            Powered by AI
                                        </small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>



@section Scripts {
    <!-- SignalR Library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
    
    <script>
        let notificationConnection;

        // Initialize application
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🌟 Novels page loaded');
            
            // Initialize components
            if (typeof AOS !== 'undefined') {
                AOS.init({ duration: 600, once: true });
            }
            
            initializeCoinPurchase();
            
            // Initialize SignalR if user is logged in
            @if (Model.IsUserLoggedIn)
            {
                <text>initializeSignalR();</text>
            }
        });

        // SignalR initialization
        function initializeSignalR() {
            console.log('🚀 Initializing SignalR connection to /notificationhub');
            
            notificationConnection = new signalR.HubConnectionBuilder()
                .withUrl('/notificationhub')
                .withAutomaticReconnect()
                .configureLogging(signalR.LogLevel.Information)
                .build();

            // Connection events
            notificationConnection.start()
                .then(() => {
                    console.log('✅ Connected to SignalR hub');
                    console.log('📋 Connection ID:', notificationConnection.connectionId);
                })
                .catch(err => {
                    console.error('❌ SignalR connection failed:', err);
                });

            // Listen for notifications
            notificationConnection.on('NewNotification', function(notification) {
                console.log('📩 Received notification:', notification);
                handleNotification(notification);
            });

            // Connection state handlers
            notificationConnection.onclose(error => {
                console.log(error ? '❌ Connection closed with error:' : '📴 Connection closed', error);
            });

            notificationConnection.onreconnecting(error => {
                console.log('� Reconnecting...', error);
            });

            notificationConnection.onreconnected(connectionId => {
                console.log('✅ Reconnected:', connectionId);
            });
        }

        // Handle incoming notifications
        function handleNotification(notification) {
            showToast(notification);
            
            if (notification.Type === 'NovelAdded') {
                refreshNovelsGrid();
            } else if (notification.Type === 'ChapterAdded') {
                updateNovelChapterCount(notification.NovelId);
            }
        }

        // Show toast notification
        function showToast(notification) {
            const toast = document.getElementById('notification-toast');
            if (!toast) return;

            const toastIcon = document.getElementById('toast-icon');
            const toastTitle = document.getElementById('toast-title');
            const toastMessage = document.getElementById('toast-message');

            // Set icon based on type
            const iconMap = {
                'NovelAdded': 'fas fa-book text-success me-2',
                'ChapterAdded': 'fas fa-plus-circle text-info me-2',
                'NovelUpdated': 'fas fa-edit text-warning me-2'
            };
            
            toastIcon.className = iconMap[notification.Type] || 'fas fa-bell text-primary me-2';
            toastTitle.textContent = notification.Title;
            toastMessage.innerHTML = `
                <div class="d-flex align-items-center">
                    <div class="flex-grow-1">
                        <p class="mb-1">${notification.Message}</p>
                        ${notification.NovelId ? '<small class="text-muted">Nhấn để xem sách</small>' : ''}
                    </div>
                </div>
            `;

            // Add click handler
            if (notification.NovelId) {
                toast.style.cursor = 'pointer';
                toast.onclick = () => window.location.href = `/NovelDetails?id=${notification.NovelId}`;
            }

            // Show toast
            const bsToast = new bootstrap.Toast(toast, {
                autohide: true,
                delay: 5000
            });
            bsToast.show();
        }

        // Refresh novels grid (simple reload for now)
        function refreshNovelsGrid() {
            setTimeout(() => {
                console.log('🔄 Refreshing novels grid...');
                window.location.reload();
            }, 1000);
        }

        // Update chapter count for specific novel
        function updateNovelChapterCount(novelId) {
            // Implementation for chapter count update
            console.log('📖 Updating chapter count for novel:', novelId);
        }

        function viewNovel(novelId) {
            // Navigate to novel reading page - adjust URL as needed
            window.location.href = `/Novel/${novelId}`;
        }

        // Show coin purchase modal
        function showCoinPurchaseModal() {
            const modal = new bootstrap.Modal(document.getElementById('coinPurchaseModal'));
            modal.show();
        }

        // Initialize coin purchase functionality
        function initializeCoinPurchase() {
            // Handle package selection
            document.querySelectorAll('.select-package').forEach(btn => {
                btn.addEventListener('click', function() {
                    const card = this.closest('.coin-package');
                    const coins = card.dataset.coins;
                    const price = card.dataset.price;
                    
                    // Remove previous selection
                    document.querySelectorAll('.coin-package').forEach(c => c.classList.remove('selected'));
                    
                    // Add selection to current card
                    card.classList.add('selected');
                    
                    // Update info
                    document.getElementById('selectedCoins').textContent = parseInt(coins).toLocaleString();
                    document.getElementById('selectedPrice').textContent = parseInt(price).toLocaleString();
                    
                    // Show info and payment button
                    document.getElementById('selectedPackageInfo').style.display = 'block';
                    document.getElementById('proceedPayment').style.display = 'inline-block';
                });
            });

            // Handle payment method selection
            document.querySelectorAll('input[name="paymentMethod"]').forEach(radio => {
                radio.addEventListener('change', function() {
                    const selectedPackage = document.querySelector('.coin-package.selected');
                    if (selectedPackage) {
                        document.getElementById('proceedPayment').style.display = 'inline-block';
                    }
                });
            });

            // Handle payment
            document.getElementById('proceedPayment').addEventListener('click', function() {
                const selectedPackage = document.querySelector('.coin-package.selected');
                const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
                
                if (!selectedPackage) {
                    alert('Vui lòng chọn gói nạp coins!');
                    return;
                }
                
                const coins = selectedPackage.dataset.coins;
                const price = selectedPackage.dataset.price;
                
                // Process payment
                processPayment(coins, price, paymentMethod);
            });
        }

        function processPayment(coins, price, paymentMethod) {
            console.log('Processing payment:', { coins, price, paymentMethod });
            
            // Show loading state
            const btn = document.getElementById('proceedPayment');
            const originalText = btn.innerHTML;
            btn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Đang xử lý...';
            btn.disabled = true;
            
            // Create form data with antiforgery token
            const params = new URLSearchParams();
            params.append('coins', coins);
            params.append('price', price);  
            params.append('paymentMethod', paymentMethod);
            
            // Get antiforgery token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            params.append('__RequestVerificationToken', token);
            
            console.log('Request data:', params.toString());
            
            // Call the backend API to process payment
            fetch('/Novels?handler=PurchaseCoins', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': token
                },
                body: params.toString()
            })
            .then(response => {
                console.log('Response status:', response.status);
                console.log('Response headers:', response.headers);
                return response.text().then(text => {
                    console.log('Response text:', text);
                    try {
                        return JSON.parse(text);
                    } catch (e) {
                        console.error('Error parsing JSON:', e);
                        throw new Error('Invalid JSON response: ' + text);
                    }
                });
            })
            .then(result => {
                console.log('Payment result:', result);
                if (result.success) {
                    // Check if we need to redirect to VNPay
                    if (result.redirectUrl) {
                        // Redirect directly to VNPay without alert
                        window.location.href = result.redirectUrl;
                        return;
                    }
                    
                    // Show success message for other payment methods
                    alert(result.message);
                    
                    // Close modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('coinPurchaseModal'));
                    modal.hide();
                    
                    // Refresh page to update coin balance
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    alert('Lỗi: ' + result.message);
                }
            })
            .catch(error => {
                console.error('Payment error:', error);
                alert('Có lỗi xảy ra khi xử lý thanh toán: ' + error.message);
            })
            .finally(() => {
                // Reset button
                btn.innerHTML = originalText;
                btn.disabled = false;
            });
        }

        // Initialize AOS animations and coin purchase
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🌟 DOM Content Loaded - Initializing...');
            
            if (typeof AOS !== 'undefined') {
                AOS.init({
                    duration: 600,
                    once: true
                });
            }
            
            // Initialize SignalR if user is logged in
            @if (Model.IsUserLoggedIn)
            {
                <text>initializeSignalR();</text>
            }
        });

        // Add new novel to the grid
        function addNovelToGrid(notification) {
            try {
                console.log('📚 Adding new novel to grid:', notification.NovelTitle);
                
                // Create new novel card HTML
                const novelCard = createNovelCard({
                    id: notification.NovelId,
                    title: notification.NovelTitle,
                    imageUrl: notification.NovelImage || '/images/default-novel.jpg',
                    author: 'Tác giả mới',
                    status: 'Đang tiến hành',
                    rating: 0,
                    viewCount: 0,
                    chapterCount: 0,
                    isNew: true
                });

                // Find novels container
                const novelsContainer = document.querySelector('.novels-grid') || 
                                      document.querySelector('.row .col-xl-3') && 
                                      document.querySelector('.row .col-xl-3').parentElement;
                
                if (novelsContainer) {
                    // Add new novel card to the beginning
                    if (novelsContainer.classList.contains('novels-grid')) {
                        novelsContainer.insertAdjacentHTML('afterbegin', novelCard);
                    } else {
                        // Bootstrap grid layout
                        novelsContainer.insertAdjacentHTML('afterbegin', `<div class="col-xl-3 col-lg-4 col-md-6 mb-4">${novelCard}</div>`);
                    }
                    
                    // Add animation to new card
                    const newCard = novelsContainer.querySelector('.novel-card');
                    if (newCard) {
                        newCard.style.opacity = '0';
                        newCard.style.transform = 'translateY(-20px)';
                        newCard.classList.add('new-novel-highlight');
                        
                        setTimeout(() => {
                            newCard.style.transition = 'all 0.5s ease';
                            newCard.style.opacity = '1';
                            newCard.style.transform = 'translateY(0)';
                        }, 100);
                        
                        // Remove highlight after 5 seconds
                        setTimeout(() => {
                            newCard.classList.remove('new-novel-highlight');
                        }, 5000);
                    }
                    
                    console.log('✅ Novel added to grid successfully');
                } else {
                    console.log('❌ Could not find novels container');
                }
            } catch (error) {
                console.error('❌ Error adding novel to grid:', error);
            }
        }

        // Create novel card HTML
        function createNovelCard(novel) {
            return `
                <div class="novel-card h-100 position-relative">
                    <div class="novel-image">
                        <img src="${novel.imageUrl}" alt="${novel.title}" class="img-fluid">
                        <div class="novel-overlay">
                            <div class="novel-actions">
                                <a href="/NovelDetails?id=${novel.id}" class="btn btn-primary btn-sm">
                                    <i class="fas fa-eye me-1"></i>Xem chi tiết
                                </a>
                            </div>
                        </div>
                        ${novel.isNew ? '<span class="badge bg-success position-absolute top-0 start-0 m-2"><i class="fas fa-star me-1"></i>Mới</span>' : ''}
                    </div>
                    <div class="novel-info">
                        <h5 class="novel-title">${novel.title}</h5>
                        <p class="novel-author">
                            <i class="fas fa-user me-1"></i>${novel.author}
                        </p>
                        <div class="novel-meta">
                            <div class="novel-stats">
                                <span class="stat-item">
                                    <i class="fas fa-star text-warning"></i>
                                    ${novel.rating}/5
                                </span>
                                <span class="stat-item">
                                    <i class="fas fa-eye text-info"></i>
                                    ${novel.viewCount.toLocaleString()}
                                </span>
                                <span class="stat-item">
                                    <i class="fas fa-list text-success"></i>
                                    ${novel.chapterCount} chương
                                </span>
                            </div>
                            <div class="novel-status">
                                <span class="badge bg-primary">${novel.status}</span>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // Update novel chapter count when new chapter is added
        function updateNovelChapterCount(notification) {
            try {
                console.log('📖 Updating chapter count for novel:', notification.NovelTitle);
                
                // Find the novel card by novel ID
                const novelCards = document.querySelectorAll('.novel-card');
                novelCards.forEach(card => {
                    const detailLink = card.querySelector('a[href*="NovelDetails"]');
                    if (detailLink && detailLink.href.includes(`id=${notification.NovelId}`)) {
                        // Find chapter count element
                        const chapterCountElement = card.querySelector('.stat-item .fa-list').parentElement;
                        if (chapterCountElement) {
                            const currentText = chapterCountElement.textContent;
                            const currentCount = parseInt(currentText.match(/\d+/)[0]);
                            const newCount = currentCount + 1;
                            
                            chapterCountElement.innerHTML = `<i class="fas fa-list text-success"></i> ${newCount} chương`;
                            
                            // Add brief highlight animation
                            chapterCountElement.style.transition = 'all 0.3s ease';
                            chapterCountElement.style.backgroundColor = 'rgba(40, 167, 69, 0.2)';
                            chapterCountElement.style.borderRadius = '4px';
                            chapterCountElement.style.padding = '2px 4px';
                            
                            setTimeout(() => {
                                chapterCountElement.style.backgroundColor = 'transparent';
                                chapterCountElement.style.padding = '0';
                            }, 2000);
                            
                            console.log(`✅ Updated chapter count to ${newCount} for novel ${notification.NovelTitle}`);
                        }
                    }
                });
            } catch (error) {
                console.error('❌ Error updating chapter count:', error);
            }
        }
    </script>
    
    <style>
        .new-novel-highlight {
            box-shadow: 0 0 20px rgba(40, 167, 69, 0.6) !important;
            border: 2px solid rgba(40, 167, 69, 0.8) !important;
        }
        
        .novel-card {
            transition: all 0.3s ease;
        }
    </style>
}

<!-- Coin Purchase Modal -->
<div class="modal fade" id="coinPurchaseModal" tabindex="-1" aria-labelledby="coinPurchaseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content bg-dark text-light">
            <div class="modal-header border-secondary">
                <h5 class="modal-title" id="coinPurchaseModalLabel">
                    <i class="fas fa-coins text-warning me-2"></i>Nạp Coins
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Coin Packages -->
                <div class="row mb-4">
                    <div class="col-12">
                        <h6 class="mb-3"><i class="fas fa-box me-2"></i>Chọn gói nạp:</h6>
                    </div>
                    
                    <!-- Basic Package -->
                    <div class="col-md-4 mb-3">
                        <div class="card h-100 border-primary coin-package" data-coins="100" data-price="10000">
                            <div class="card-body text-center bg-dark">
                                <div class="package-icon">
                                    <i class="fas fa-coin text-primary fa-3x mb-3"></i>
                                </div>
                                <h5 class="card-title text-light">Gói Cơ Bản</h5>
                                <h3 class="text-primary">100 Coins</h3>
                                <p class="text-muted">10.000 VND</p>
                                <div class="package-features">
                                    <i class="fas fa-check text-success me-2"></i>6 lần dịch AI<br>
                                    <i class="fas fa-check text-success me-2"></i>Có thể mua nhiều chapters<br>
                                    <i class="fas fa-star text-warning me-2"></i>Bonus 50 coins
                                </div>
                                <button class="btn btn-outline-primary mt-3 select-package">Chọn gói này</button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Popular Package -->
                    <div class="col-md-4 mb-3">
                        <div class="card h-100 border-success coin-package popular" data-coins="300" data-price="25000">
                            <div class="card-body text-center bg-dark">
                                <div class="popular-badge">
                                    <span class="badge bg-success">Phổ biến</span>
                                </div>
                                <div class="package-icon">
                                    <i class="fas fa-coins text-success fa-3x mb-3"></i>
                                </div>
                                <h5 class="card-title text-light">Gói Tiết Kiệm</h5>
                                <h3 class="text-success">300 Coins</h3>
                                <p class="text-muted">25.000 VND</p>
                                <div class="package-features">
                                    <i class="fas fa-check text-success me-2"></i>12 lần tóm tắt AI<br>
                                    <i class="fas fa-check text-success me-2"></i>12 lần dịch AI<br>
                                    <i class="fas fa-check text-success me-2"></i>Đọc nhiều chapters có phí<br>
                                    <i class="fas fa-star text-warning me-2"></i>Bonus 150 coins<br>
                                    <i class="fas fa-star text-warning me-2"></i>Ưu tiên hỗ trợ
                                </div>
                                <button class="btn btn-success mt-3 select-package">Chọn gói này</button>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Premium Package -->
                    <div class="col-md-4 mb-3">
                        <div class="card h-100 border-warning coin-package" data-coins="600" data-price="45000">
                            <div class="card-body text-center bg-dark">
                                <div class="package-icon">
                                    <i class="fas fa-crown text-warning fa-3x mb-3"></i>
                                </div>
                                <h5 class="card-title text-light">Gói Cao Cấp</h5>
                                <h3 class="text-warning">600 Coins</h3>
                                <p class="text-muted">45.000 VND</p>
                                <div class="package-features">
                                    <i class="fas fa-check text-success me-2"></i>12 lần tóm tắt AI<br>
                                    <i class="fas fa-check text-success me-2"></i>12 lần dịch AI<br>
                                    <i class="fas fa-check text-success me-2"></i>Đọc nhiều chapters có phí<br>
                                    <i class="fas fa-star text-warning me-2"></i>Bonus 150 coins<br>
                                    <i class="fas fa-star text-warning me-2"></i>Ưu tiên hỗ trợ
                                </div>
                                <button class="btn btn-warning text-dark mt-3 select-package">Chọn gói này</button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Selected Package Info -->
                <div class="alert alert-info" id="selectedPackageInfo" style="display: none;">
                    <h6><i class="fas fa-info-circle me-2"></i>Thông tin gói đã chọn:</h6>
                    <div class="row">
                        <div class="col-6">
                            <strong>Số coins:</strong> <span id="selectedCoins">0</span> coins
                        </div>
                        <div class="col-6">
                            <strong>Giá:</strong> <span id="selectedPrice">0</span> VND
                        </div>
                    </div>
                </div>
                
                <!-- Payment Methods -->
                <div class="payment-methods">
                    <h6><i class="fas fa-credit-card me-2"></i>Chọn phương thức thanh toán:</h6>
                    <div class="row">
                        <div class="col-md-6 mb-2">
                            <label class="payment-method">
                                <input type="radio" name="paymentMethod" value="banking" checked>
                                <div class="payment-card">
                                    <i class="fas fa-university fa-2x text-info"></i>
                                    <span>Chuyển khoản</span>
                                </div>
                            </label>
                        </div>
                        <div class="col-md-6 mb-2">
                            <label class="payment-method">
                                <input type="radio" name="paymentMethod" value="vnpay">
                                <div class="payment-card">
                                    <i class="fas fa-credit-card fa-2x text-success"></i>
                                    <span>VNPay</span>
                                </div>
                            </label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times me-2"></i>Hủy
                </button>
                <button type="button" class="btn btn-warning" id="proceedPayment" style="display: none;">
                    <i class="fas fa-credit-card me-2"></i>Thanh toán
                </button>
            </div>
        </div>
    </div>
</div>

@Html.AntiForgeryToken()

@section Styles {
    <style>
        :root {
            --bg-primary: #000000;
            --bg-secondary: #1a1a1a;
            --bg-tertiary: #2d2d2d;
            --text-primary: #ffffff;
            --text-secondary: #b3b3b3;
            --text-muted: #666666;
            --accent-color: #ffffff;
            --border-color: #333333;
            --card-bg: rgba(255, 255, 255, 0.05);
            --card-border: rgba(255, 255, 255, 0.1);
        }

        .novels-library-section {
            padding: 2rem 0;
            min-height: 100vh;
            background: var(--bg-primary);
            position: relative;
        }

        .novels-library-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: 
                radial-gradient(circle at 25% 25%, rgba(255, 255, 255, 0.03) 0%, transparent 50%),
                radial-gradient(circle at 75% 75%, rgba(255, 255, 255, 0.03) 0%, transparent 50%);
        }

        .library-header {
            padding: 2rem 0;
            position: relative;
            z-index: 1;
        }

        .library-header h1 {
            color: var(--text-primary);
            text-shadow: 0 0 20px rgba(255, 255, 255, 0.3);
        }

        .library-header .lead {
            color: var(--text-secondary);
        }

        .search-filter-card {
            background: var(--card-bg);
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 10px 30px rgba(0,0,0,0.5);
            border: 1px solid var(--card-border);
            backdrop-filter: blur(10px);
            position: relative;
            z-index: 1;
        }

        .results-info {
            padding: 1rem 0;
            border-bottom: 2px solid var(--border-color);
            color: var(--text-primary);
        }

        .novel-card {
            background: var(--card-bg);
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            transition: all 0.3s ease;
            border: 1px solid var(--card-border);
            overflow: hidden;
            position: relative;
            backdrop-filter: blur(10px);
        }

        .novel-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0,0,0,0.5);
            border-color: var(--text-primary);
        }

        .novel-image-container {
            position: relative;
            height: 250px;
            overflow: hidden;
        }

        .novel-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .novel-card:hover .novel-image {
            transform: scale(1.05);
        }

        .novel-placeholder {
            width: 100%;
            height: 100%;
            background: var(--bg-tertiary);
            display: flex;
            align-items: center;
            justify-content: center;
            color: var(--text-secondary);
        }

        .status-badge {
            position: absolute;
            top: 10px;
            left: 10px;
            z-index: 2;
        }

        .rating-badge {
            position: absolute;
            top: 10px;
            right: 10px;
            z-index: 2;
        }

        .novel-card-body {
            padding: 1.5rem;
            flex-grow: 1;
        }

        .novel-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--text-primary);
            line-height: 1.3;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .novel-meta {
            color: var(--text-secondary);
        }

        .novel-description {
            font-size: 0.9rem;
            color: var(--text-secondary);
            line-height: 1.4;
            margin-bottom: 1rem;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .novel-categories {
            margin-bottom: 1rem;
        }

        .novel-categories .badge {
            font-size: 0.7rem;
            padding: 0.3rem 0.6rem;
            background: var(--bg-tertiary);
            color: var(--text-secondary);
            border: 1px solid var(--border-color);
        }

        .novel-stats {
            font-size: 0.8rem;
            border-top: 1px solid var(--border-color);
            padding-top: 1rem;
            color: var(--text-secondary);
        }

        .novel-card-footer {
            padding: 1rem 1.5rem;
            background: var(--bg-secondary);
            border-top: 1px solid var(--border-color);
        }

        .pagination {
            margin-bottom: 0;
        }

        .pagination .page-link {
            border-radius: 8px;
            border: 1px solid var(--border-color);
            margin: 0 2px;
            padding: 0.75rem 1rem;
            color: var(--text-primary);
            transition: all 0.3s ease;
            background: var(--card-bg);
            backdrop-filter: blur(10px);
        }

        .pagination .page-item.active .page-link {
            background: var(--text-primary);
            border-color: var(--text-primary);
            color: var(--bg-primary);
            box-shadow: 0 4px 15px rgba(255, 255, 255, 0.3);
        }

        .pagination .page-link:hover {
            background: var(--text-primary);
            border-color: var(--text-primary);
            color: var(--bg-primary);
            transform: translateY(-2px);
        }

        .no-results {
            background: var(--card-bg);
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            border: 1px solid var(--card-border);
            backdrop-filter: blur(10px);
        }

        .form-control, .form-select {
            border-radius: 8px;
            border: 1px solid var(--card-border);
            padding: 0.6rem 1rem;
            transition: all 0.3s ease;
            background: var(--card-bg);
            color: var(--text-primary);
            backdrop-filter: blur(10px);
        }

        .form-control:focus, .form-select:focus {
            border-color: var(--text-primary);
            box-shadow: 0 0 0 0.2rem rgba(255, 255, 255, 0.15);
            background: rgba(255, 255, 255, 0.1);
        }

        .form-control::placeholder {
            color: var(--text-muted);
        }

        .form-label {
            color: var(--text-primary);
            font-weight: 500;
        }

        .btn-primary {
            background: var(--text-primary);
            border: none;
            border-radius: 8px;
            padding: 0.6rem 1.5rem;
            font-weight: 500;
            transition: all 0.3s ease;
            color: var(--bg-primary);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(255, 255, 255, 0.3);
            background: var(--text-secondary);
            color: var(--bg-primary);
        }

        /* Sidebar Styles */
        .user-sidebar {
            position: sticky;
            top: 2rem;
            height: fit-content;
        }

        .sidebar-card {
            background: var(--card-bg);
            border-radius: 15px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            border: 1px solid var(--card-border);
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .sidebar-card:hover {
            box-shadow: 0 10px 25px rgba(0,0,0,0.5);
        }

        .sidebar-card-header {
            padding: 1rem 1.5rem;
            border-bottom: 1px solid var(--border-color);
            background: var(--bg-secondary);
            border-radius: 15px 15px 0 0;
        }

        .sidebar-card-header h5 {
            margin: 0;
            color: var(--text-primary);
            font-size: 1rem;
            font-weight: 600;
        }

        .sidebar-card-body {
            padding: 1.5rem;
        }

        .user-info {
            text-align: center;
        }

        .user-avatar {
            margin-bottom: 1rem;
        }

        .user-name {
            color: var(--text-primary);
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .user-role {
            font-size: 0.9rem;
            margin-bottom: 1rem;
            text-transform: capitalize;
            color: var(--text-secondary);
        }

        .user-coins {
            background: var(--bg-tertiary);
            padding: 0.75rem;
            border-radius: 8px;
            border: 1px solid var(--border-color);
        }

        .coins-amount {
            font-size: 1.1rem;
            color: var(--text-primary);
        }

        .sidebar-menu {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .sidebar-menu-item {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: var(--text-primary);
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s ease;
            border: 1px solid transparent;
        }

        .sidebar-menu-item:hover {
            background: var(--text-primary);
            color: var(--bg-primary);
            text-decoration: none;
            transform: translateX(5px);
        }

        .sidebar-menu-item.disabled {
            color: var(--text-muted);
            cursor: not-allowed;
            opacity: 0.6;
        }

        .sidebar-menu-item.disabled:hover {
            background: transparent;
            transform: none;
        }

        .chatbot-info {
            text-align: center;
        }

        .chatbot-stats {
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid var(--border-color);
        }

        /* Coin Purchase Modal Styles */
        .coin-package {
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

        .coin-package:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(255,255,255,0.1);
        }

        .coin-package.selected {
            border-color: #ffc107 !important;
            box-shadow: 0 0 20px rgba(255, 193, 7, 0.5);
        }

        .coin-package.selected::after {
            content: '✓';
            position: absolute;
            top: 10px;
            right: 15px;
            background: #ffc107;
            color: #000;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
        }

        .coin-package.popular {
            position: relative;
        }

        .coin-package.popular {
            border-width: 2px;
        }

        .popular-badge {
            position: absolute;
            top: -10px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 10;
        }

        .package-features {
            text-align: left;
            margin: 1rem 0;
            font-size: 0.9rem;
        }

        .payment-method {
            cursor: pointer;
            display: block;
        }

        .payment-method input[type="radio"] {
            display: none;
        }

        .payment-card {
            padding: 1rem;
            border: 2px solid var(--border-color);
            border-radius: 8px;
            text-align: center;
            transition: all 0.3s ease;
            background: var(--bg-secondary);
        }

        .payment-method input[type="radio"]:checked + .payment-card {
            border-color: #ffc107;
            background: rgba(255, 193, 7, 0.1);
        }

        .payment-card:hover {
            border-color: #ffc107;
        }

        .payment-card span {
            display: block;
            margin-top: 0.5rem;
            font-weight: 500;
        }
    </style>
}

@* Include SignalR Notification Toast *@
@await Html.PartialAsync("_NotificationToast") 